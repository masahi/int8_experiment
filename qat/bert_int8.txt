['input_ids', 'attention_mask', 'token_type_ids']
def @main(%input_ids: Tensor[(1, 128), int64], %attention_mask: Tensor[(1, 128), int64], %token_type_ids: Tensor[(1, 128), int64]) -> (Tensor[(1, 128), float32], Tensor[(1, 128), float32]) {
  %0 = qnn.quantize(meta[relay.Constant][0] /* ty=Tensor[(30522, 1024), float32] */, 0.00895041f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(30522, 1024), int8] */;
  %1 = less(%input_ids, 0 /* ty=int64 */) /* ty=Tensor[(1, 128), bool] */;
  %2 = add(%input_ids, 30522 /* ty=int64 */) /* ty=Tensor[(1, 128), int64] */;
  %3 = qnn.dequantize(%0, 0.00895041f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(30522, 1024), float32] */;
  %4 = where(%1, %2, %input_ids) /* ty=Tensor[(1, 128), int64] */;
  %5 = qnn.quantize(meta[relay.Constant][1] /* ty=Tensor[(512, 1024), float32] */, 0.00838451f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(512, 1024), int8] */;
  %6 = qnn.dequantize(%5, 0.00838451f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(512, 1024), float32] */;
  %7 = take(%3, %4, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %8 = take(%6, meta[relay.Constant][2] /* ty=Tensor[(1, 128), int64] */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %9 = qnn.quantize(meta[relay.Constant][3] /* ty=Tensor[(2, 1024), float32] */, 0.00785891f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(2, 1024), int8] */;
  %10 = less(%token_type_ids, 0 /* ty=int64 */) /* ty=Tensor[(1, 128), bool] */;
  %11 = add(%token_type_ids, 2 /* ty=int64 */) /* ty=Tensor[(1, 128), int64] */;
  %12 = qnn.dequantize(%9, 0.00785891f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(2, 1024), float32] */;
  %13 = where(%10, %11, %token_type_ids) /* ty=Tensor[(1, 128), int64] */;
  %14 = add(%7, %8) /* ty=Tensor[(1, 128, 1024), float32] */;
  %15 = take(%12, %13, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %16 = add(%14, %15) /* ty=Tensor[(1, 128, 1024), float32] */;
  %17 = mean(%16, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %18 = subtract(%16, %17) /* ty=Tensor[(1, 128, 1024), float32] */;
  %19 = power(%18, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %20 = mean(%19, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %21 = add(%20, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %22 = sqrt(%21) /* ty=Tensor[(1, 128, 1), float32] */;
  %23 = divide(%18, %22) /* ty=Tensor[(1, 128, 1024), float32] */;
  %24 = multiply(%23, meta[relay.Constant][4] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %25 = add(%24, meta[relay.Constant][5] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %26 = qnn.quantize(%25, 0.0196148f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %27 = qnn.quantize(meta[relay.Constant][6] /* ty=Tensor[(1024, 1024), float32] */, 0.00561207f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %28 = transpose(%27, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %29 = reshape(%26, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %30 = transpose(%28, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %31 = qnn.dense(%29, %30, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0196148f /* ty=float32 */, 0.00561207f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %32 = reshape(%31, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %33 = qnn.quantize(meta[relay.Constant][7] /* ty=Tensor[(1024), float32] */, 0.00011008f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %34 = qnn.add(%32, %33, 0.00011008f /* ty=float32 */, 0 /* ty=int32 */, 0.00011008f /* ty=float32 */, 0 /* ty=int32 */, 0.00011008f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %35 = reshape(%34, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %36 = transpose(%35, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %37 = qnn.requantize(%36, 0.00011008f /* ty=float32 */, 0 /* ty=int32 */, 0.0555795f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %38 = broadcast_to(%37, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %39 = qnn.quantize(%25, 0.0196148f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %40 = qnn.quantize(meta[relay.Constant][8] /* ty=Tensor[(1024, 1024), float32] */, 0.00561207f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %41 = transpose(%40, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %42 = reshape(%39, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %43 = transpose(%41, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %44 = qnn.dense(%42, %43, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0196148f /* ty=float32 */, 0.00561207f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %45 = reshape(%44, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %46 = qnn.quantize(meta[relay.Constant][9] /* ty=Tensor[(1024), float32] */, 0.00011008f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %47 = qnn.add(%45, %46, 0.00011008f /* ty=float32 */, 0 /* ty=int32 */, 0.00011008f /* ty=float32 */, 0 /* ty=int32 */, 0.00011008f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %48 = reshape(%47, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %49 = transpose(%48, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %50 = qnn.requantize(%49, 0.00011008f /* ty=float32 */, 0 /* ty=int32 */, 0.0555795f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %51 = broadcast_to(%50, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %52 = reshape(%51, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %53 = reshape(%38, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %54 = transpose(%52, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %55 = qnn.batch_matmul(%53, %54, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0555795f /* ty=float32 */, 0.0555795f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %56 = reshape(%55, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %57 = qnn.dequantize(%56, 0.00308908f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %58 = expand_dims(%attention_mask, axis=1) /* ty=Tensor[(1, 1, 128), int64] */;
  %59 = expand_dims(%58, axis=2) /* ty=Tensor[(1, 1, 1, 128), int64] */;
  %60 = cast(%59, dtype="float32") /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %61 = subtract(1f /* ty=float32 */, %60) /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %62 = divide(%57, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %63 = multiply(%61, -10000f /* ty=float32 */) /* ty=Tensor[(1, 1, 1, 128), float32] */;
  %64 = add(%62, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %65 = nn.softmax(%64, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %66 = qnn.quantize(%65, 0.00847973f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %67 = broadcast_to(%66, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %68 = qnn.quantize(%25, 0.0196148f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %69 = qnn.quantize(meta[relay.Constant][10] /* ty=Tensor[(1024, 1024), float32] */, 0.00561207f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %70 = transpose(%69, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %71 = reshape(%68, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %72 = transpose(%70, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %73 = qnn.dense(%71, %72, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0196148f /* ty=float32 */, 0.00561207f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %74 = reshape(%73, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %75 = qnn.quantize(meta[relay.Constant][11] /* ty=Tensor[(1024), float32] */, 0.00011008f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %76 = qnn.add(%74, %75, 0.00011008f /* ty=float32 */, 0 /* ty=int32 */, 0.00011008f /* ty=float32 */, 0 /* ty=int32 */, 0.00011008f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %77 = reshape(%76, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %78 = transpose(%77, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %79 = qnn.requantize(%78, 0.00011008f /* ty=float32 */, 0 /* ty=int32 */, 0.0555795f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %80 = broadcast_to(%79, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %81 = reshape(%80, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %82 = reshape(%67, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %83 = transpose(%81, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %84 = qnn.batch_matmul(%82, %83, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00847973f /* ty=float32 */, 0.0555795f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %85 = reshape(%84, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %86 = transpose(%85, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %87 = reshape(%86, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %88 = qnn.requantize(%87, 0.000471299f /* ty=float32 */, 0 /* ty=int32 */, 0.0121958f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %89 = qnn.quantize(meta[relay.Constant][12] /* ty=Tensor[(1024, 1024), float32] */, 0.00786415f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %90 = transpose(%89, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %91 = reshape(%88, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %92 = transpose(%90, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %93 = qnn.dense(%91, %92, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0121958f /* ty=float32 */, 0.00786415f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %94 = reshape(%93, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %95 = qnn.quantize(meta[relay.Constant][13] /* ty=Tensor[(1024), float32] */, 9.59092e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %96 = qnn.add(%94, %95, 9.59092e-05f /* ty=float32 */, 0 /* ty=int32 */, 9.59092e-05f /* ty=float32 */, 0 /* ty=int32 */, 9.59092e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %97 = qnn.requantize(%96, 9.59092e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0200163f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %98 = qnn.quantize(%25, 0.0196148f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %99 = qnn.dequantize(%97, 0.0200163f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %100 = qnn.dequantize(%98, 0.0196148f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %101 = add(%99, %100) /* ty=Tensor[(1, 128, 1024), float32] */;
  %102 = mean(%101, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %103 = subtract(%101, %102) /* ty=Tensor[(1, 128, 1024), float32] */;
  %104 = power(%103, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %105 = mean(%104, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %106 = add(%105, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %107 = sqrt(%106) /* ty=Tensor[(1, 128, 1), float32] */;
  %108 = divide(%103, %107) /* ty=Tensor[(1, 128, 1024), float32] */;
  %109 = multiply(%108, meta[relay.Constant][14] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %110 = add(%109, meta[relay.Constant][15] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %111 = qnn.quantize(%110, 0.251408f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %112 = qnn.quantize(meta[relay.Constant][16] /* ty=Tensor[(4096, 1024), float32] */, 0.00323582f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %113 = transpose(%112, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %114 = reshape(%111, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %115 = transpose(%113, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %116 = qnn.dense(%114, %115, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.251408f /* ty=float32 */, 0.00323582f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %117 = reshape(%116, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %118 = qnn.dequantize(%117, 0.000813513f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %119 = add(%118, meta[relay.Constant][17] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %120 = divide(%119, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %121 = erf(%120) /* ty=Tensor[(1, 128, 4096), float32] */;
  %122 = multiply(%119, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %123 = add(%121, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %124 = multiply(%122, %123) /* ty=Tensor[(1, 128, 4096), float32] */;
  %125 = qnn.quantize(%124, 0.0391822f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %126 = qnn.quantize(meta[relay.Constant][18] /* ty=Tensor[(1024, 4096), float32] */, 0.0221456f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %127 = transpose(%126, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %128 = reshape(%125, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %129 = transpose(%127, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %130 = qnn.dense(%128, %129, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0391822f /* ty=float32 */, 0.0221456f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %131 = reshape(%130, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %132 = qnn.quantize(meta[relay.Constant][19] /* ty=Tensor[(1024), float32] */, 0.000867712f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %133 = qnn.add(%131, %132, 0.000867712f /* ty=float32 */, 0 /* ty=int32 */, 0.000867712f /* ty=float32 */, 0 /* ty=int32 */, 0.000867712f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %134 = qnn.requantize(%133, 0.000867712f /* ty=float32 */, 0 /* ty=int32 */, 0.153159f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %135 = qnn.quantize(%110, 0.251408f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %136 = qnn.dequantize(%134, 0.153159f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %137 = qnn.dequantize(%135, 0.251408f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %138 = add(%136, %137) /* ty=Tensor[(1, 128, 1024), float32] */;
  %139 = mean(%138, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %140 = subtract(%138, %139) /* ty=Tensor[(1, 128, 1024), float32] */;
  %141 = power(%140, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %142 = mean(%141, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %143 = add(%142, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %144 = sqrt(%143) /* ty=Tensor[(1, 128, 1), float32] */;
  %145 = divide(%140, %144) /* ty=Tensor[(1, 128, 1024), float32] */;
  %146 = multiply(%145, meta[relay.Constant][20] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %147 = add(%146, meta[relay.Constant][21] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %148 = qnn.quantize(%147, 0.0728465f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %149 = qnn.quantize(meta[relay.Constant][22] /* ty=Tensor[(1024, 1024), float32] */, 0.00332496f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %150 = transpose(%149, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %151 = reshape(%148, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %152 = transpose(%150, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %153 = qnn.dense(%151, %152, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0728465f /* ty=float32 */, 0.00332496f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %154 = reshape(%153, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %155 = qnn.quantize(meta[relay.Constant][23] /* ty=Tensor[(1024), float32] */, 0.000242212f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %156 = qnn.add(%154, %155, 0.000242212f /* ty=float32 */, 0 /* ty=int32 */, 0.000242212f /* ty=float32 */, 0 /* ty=int32 */, 0.000242212f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %157 = reshape(%156, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %158 = transpose(%157, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %159 = qnn.requantize(%158, 0.000242212f /* ty=float32 */, 0 /* ty=int32 */, 0.0516466f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %160 = broadcast_to(%159, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %161 = qnn.quantize(%147, 0.0728465f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %162 = qnn.quantize(meta[relay.Constant][24] /* ty=Tensor[(1024, 1024), float32] */, 0.00332496f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %163 = transpose(%162, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %164 = reshape(%161, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %165 = transpose(%163, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %166 = qnn.dense(%164, %165, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0728465f /* ty=float32 */, 0.00332496f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %167 = reshape(%166, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %168 = qnn.quantize(meta[relay.Constant][25] /* ty=Tensor[(1024), float32] */, 0.000242212f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %169 = qnn.add(%167, %168, 0.000242212f /* ty=float32 */, 0 /* ty=int32 */, 0.000242212f /* ty=float32 */, 0 /* ty=int32 */, 0.000242212f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %170 = reshape(%169, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %171 = transpose(%170, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %172 = qnn.requantize(%171, 0.000242212f /* ty=float32 */, 0 /* ty=int32 */, 0.0516466f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %173 = broadcast_to(%172, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %174 = reshape(%173, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %175 = reshape(%160, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %176 = transpose(%174, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %177 = qnn.batch_matmul(%175, %176, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0516466f /* ty=float32 */, 0.0516466f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %178 = reshape(%177, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %179 = qnn.dequantize(%178, 0.00266737f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %180 = divide(%179, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %181 = add(%180, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %182 = nn.softmax(%181, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %183 = qnn.quantize(%182, 0.00811722f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %184 = broadcast_to(%183, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %185 = qnn.quantize(%147, 0.0728465f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %186 = qnn.quantize(meta[relay.Constant][26] /* ty=Tensor[(1024, 1024), float32] */, 0.00332496f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %187 = transpose(%186, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %188 = reshape(%185, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %189 = transpose(%187, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %190 = qnn.dense(%188, %189, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0728465f /* ty=float32 */, 0.00332496f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %191 = reshape(%190, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %192 = qnn.quantize(meta[relay.Constant][27] /* ty=Tensor[(1024), float32] */, 0.000242212f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %193 = qnn.add(%191, %192, 0.000242212f /* ty=float32 */, 0 /* ty=int32 */, 0.000242212f /* ty=float32 */, 0 /* ty=int32 */, 0.000242212f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %194 = reshape(%193, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %195 = transpose(%194, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %196 = qnn.requantize(%195, 0.000242212f /* ty=float32 */, 0 /* ty=int32 */, 0.0516466f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %197 = broadcast_to(%196, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %198 = reshape(%197, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %199 = reshape(%184, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %200 = transpose(%198, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %201 = qnn.batch_matmul(%199, %200, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00811722f /* ty=float32 */, 0.0516466f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %202 = reshape(%201, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %203 = transpose(%202, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %204 = reshape(%203, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %205 = qnn.requantize(%204, 0.000419227f /* ty=float32 */, 0 /* ty=int32 */, 0.0144503f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %206 = qnn.quantize(meta[relay.Constant][28] /* ty=Tensor[(1024, 1024), float32] */, 0.00710707f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %207 = transpose(%206, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %208 = reshape(%205, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %209 = transpose(%207, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %210 = qnn.dense(%208, %209, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0144503f /* ty=float32 */, 0.00710707f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %211 = reshape(%210, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %212 = qnn.quantize(meta[relay.Constant][29] /* ty=Tensor[(1024), float32] */, 0.000102699f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %213 = qnn.add(%211, %212, 0.000102699f /* ty=float32 */, 0 /* ty=int32 */, 0.000102699f /* ty=float32 */, 0 /* ty=int32 */, 0.000102699f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %214 = qnn.requantize(%213, 0.000102699f /* ty=float32 */, 0 /* ty=int32 */, 0.0144237f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %215 = qnn.quantize(%147, 0.0728465f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %216 = qnn.dequantize(%214, 0.0144237f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %217 = qnn.dequantize(%215, 0.0728465f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %218 = add(%216, %217) /* ty=Tensor[(1, 128, 1024), float32] */;
  %219 = mean(%218, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %220 = subtract(%218, %219) /* ty=Tensor[(1, 128, 1024), float32] */;
  %221 = power(%220, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %222 = mean(%221, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %223 = add(%222, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %224 = sqrt(%223) /* ty=Tensor[(1, 128, 1), float32] */;
  %225 = divide(%220, %224) /* ty=Tensor[(1, 128, 1024), float32] */;
  %226 = multiply(%225, meta[relay.Constant][30] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %227 = add(%226, meta[relay.Constant][31] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %228 = qnn.quantize(%227, 0.378437f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %229 = qnn.quantize(meta[relay.Constant][32] /* ty=Tensor[(4096, 1024), float32] */, 0.00190287f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %230 = transpose(%229, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %231 = reshape(%228, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %232 = transpose(%230, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %233 = qnn.dense(%231, %232, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.378437f /* ty=float32 */, 0.00190287f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %234 = reshape(%233, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %235 = qnn.dequantize(%234, 0.000720115f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %236 = add(%235, meta[relay.Constant][33] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %237 = divide(%236, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %238 = erf(%237) /* ty=Tensor[(1, 128, 4096), float32] */;
  %239 = multiply(%236, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %240 = add(%238, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %241 = multiply(%239, %240) /* ty=Tensor[(1, 128, 4096), float32] */;
  %242 = qnn.quantize(%241, 0.048838f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %243 = qnn.quantize(meta[relay.Constant][34] /* ty=Tensor[(1024, 4096), float32] */, 0.013511f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %244 = transpose(%243, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %245 = reshape(%242, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %246 = transpose(%244, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %247 = qnn.dense(%245, %246, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.048838f /* ty=float32 */, 0.013511f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %248 = reshape(%247, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %249 = qnn.quantize(meta[relay.Constant][35] /* ty=Tensor[(1024), float32] */, 0.000659848f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %250 = qnn.add(%248, %249, 0.000659848f /* ty=float32 */, 0 /* ty=int32 */, 0.000659848f /* ty=float32 */, 0 /* ty=int32 */, 0.000659848f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %251 = qnn.requantize(%250, 0.000659848f /* ty=float32 */, 0 /* ty=int32 */, 0.10394f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %252 = qnn.quantize(%227, 0.378437f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %253 = qnn.dequantize(%251, 0.10394f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %254 = qnn.dequantize(%252, 0.378437f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %255 = add(%253, %254) /* ty=Tensor[(1, 128, 1024), float32] */;
  %256 = mean(%255, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %257 = subtract(%255, %256) /* ty=Tensor[(1, 128, 1024), float32] */;
  %258 = power(%257, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %259 = mean(%258, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %260 = add(%259, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %261 = sqrt(%260) /* ty=Tensor[(1, 128, 1), float32] */;
  %262 = divide(%257, %261) /* ty=Tensor[(1, 128, 1024), float32] */;
  %263 = multiply(%262, meta[relay.Constant][36] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %264 = add(%263, meta[relay.Constant][37] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %265 = qnn.quantize(%264, 0.0871962f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %266 = qnn.quantize(meta[relay.Constant][38] /* ty=Tensor[(1024, 1024), float32] */, 0.00260139f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %267 = transpose(%266, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %268 = reshape(%265, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %269 = transpose(%267, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %270 = qnn.dense(%268, %269, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0871962f /* ty=float32 */, 0.00260139f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %271 = reshape(%270, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %272 = qnn.quantize(meta[relay.Constant][39] /* ty=Tensor[(1024), float32] */, 0.000226831f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %273 = qnn.add(%271, %272, 0.000226831f /* ty=float32 */, 0 /* ty=int32 */, 0.000226831f /* ty=float32 */, 0 /* ty=int32 */, 0.000226831f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %274 = reshape(%273, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %275 = transpose(%274, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %276 = qnn.requantize(%275, 0.000226831f /* ty=float32 */, 0 /* ty=int32 */, 0.0575326f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %277 = broadcast_to(%276, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %278 = qnn.quantize(%264, 0.0871962f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %279 = qnn.quantize(meta[relay.Constant][40] /* ty=Tensor[(1024, 1024), float32] */, 0.00260139f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %280 = transpose(%279, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %281 = reshape(%278, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %282 = transpose(%280, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %283 = qnn.dense(%281, %282, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0871962f /* ty=float32 */, 0.00260139f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %284 = reshape(%283, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %285 = qnn.quantize(meta[relay.Constant][41] /* ty=Tensor[(1024), float32] */, 0.000226831f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %286 = qnn.add(%284, %285, 0.000226831f /* ty=float32 */, 0 /* ty=int32 */, 0.000226831f /* ty=float32 */, 0 /* ty=int32 */, 0.000226831f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %287 = reshape(%286, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %288 = transpose(%287, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %289 = qnn.requantize(%288, 0.000226831f /* ty=float32 */, 0 /* ty=int32 */, 0.0575326f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %290 = broadcast_to(%289, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %291 = reshape(%290, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %292 = reshape(%277, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %293 = transpose(%291, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %294 = qnn.batch_matmul(%292, %293, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0575326f /* ty=float32 */, 0.0575326f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %295 = reshape(%294, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %296 = qnn.dequantize(%295, 0.00331f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %297 = divide(%296, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %298 = add(%297, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %299 = nn.softmax(%298, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %300 = qnn.quantize(%299, 0.0078178f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %301 = broadcast_to(%300, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %302 = qnn.quantize(%264, 0.0871962f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %303 = qnn.quantize(meta[relay.Constant][42] /* ty=Tensor[(1024, 1024), float32] */, 0.00260139f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %304 = transpose(%303, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %305 = reshape(%302, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %306 = transpose(%304, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %307 = qnn.dense(%305, %306, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0871962f /* ty=float32 */, 0.00260139f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %308 = reshape(%307, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %309 = qnn.quantize(meta[relay.Constant][43] /* ty=Tensor[(1024), float32] */, 0.000226831f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %310 = qnn.add(%308, %309, 0.000226831f /* ty=float32 */, 0 /* ty=int32 */, 0.000226831f /* ty=float32 */, 0 /* ty=int32 */, 0.000226831f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %311 = reshape(%310, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %312 = transpose(%311, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %313 = qnn.requantize(%312, 0.000226831f /* ty=float32 */, 0 /* ty=int32 */, 0.0575326f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %314 = broadcast_to(%313, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %315 = reshape(%314, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %316 = reshape(%301, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %317 = transpose(%315, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %318 = qnn.batch_matmul(%316, %317, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0078178f /* ty=float32 */, 0.0575326f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %319 = reshape(%318, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %320 = transpose(%319, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %321 = reshape(%320, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %322 = qnn.requantize(%321, 0.000449778f /* ty=float32 */, 0 /* ty=int32 */, 0.013671f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %323 = qnn.quantize(meta[relay.Constant][44] /* ty=Tensor[(1024, 1024), float32] */, 0.00337939f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %324 = transpose(%323, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %325 = reshape(%322, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %326 = transpose(%324, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %327 = qnn.dense(%325, %326, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.013671f /* ty=float32 */, 0.00337939f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %328 = reshape(%327, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %329 = qnn.quantize(meta[relay.Constant][45] /* ty=Tensor[(1024), float32] */, 4.61998e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %330 = qnn.add(%328, %329, 4.61998e-05f /* ty=float32 */, 0 /* ty=int32 */, 4.61998e-05f /* ty=float32 */, 0 /* ty=int32 */, 4.61998e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %331 = qnn.requantize(%330, 4.61998e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.00873957f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %332 = qnn.quantize(%264, 0.0871962f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %333 = qnn.dequantize(%331, 0.00873957f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %334 = qnn.dequantize(%332, 0.0871962f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %335 = add(%333, %334) /* ty=Tensor[(1, 128, 1024), float32] */;
  %336 = mean(%335, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %337 = subtract(%335, %336) /* ty=Tensor[(1, 128, 1024), float32] */;
  %338 = power(%337, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %339 = mean(%338, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %340 = add(%339, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %341 = sqrt(%340) /* ty=Tensor[(1, 128, 1), float32] */;
  %342 = divide(%337, %341) /* ty=Tensor[(1, 128, 1024), float32] */;
  %343 = multiply(%342, meta[relay.Constant][46] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %344 = add(%343, meta[relay.Constant][47] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %345 = qnn.quantize(%344, 0.412015f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %346 = qnn.quantize(meta[relay.Constant][48] /* ty=Tensor[(4096, 1024), float32] */, 0.00198283f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %347 = transpose(%346, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %348 = reshape(%345, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %349 = transpose(%347, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %350 = qnn.dense(%348, %349, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.412015f /* ty=float32 */, 0.00198283f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %351 = reshape(%350, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %352 = qnn.dequantize(%351, 0.000816956f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %353 = add(%352, meta[relay.Constant][49] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %354 = divide(%353, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %355 = erf(%354) /* ty=Tensor[(1, 128, 4096), float32] */;
  %356 = multiply(%353, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %357 = add(%355, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %358 = multiply(%356, %357) /* ty=Tensor[(1, 128, 4096), float32] */;
  %359 = qnn.quantize(%358, 0.0339606f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %360 = qnn.quantize(meta[relay.Constant][50] /* ty=Tensor[(1024, 4096), float32] */, 0.0121648f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %361 = transpose(%360, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %362 = reshape(%359, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %363 = transpose(%361, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %364 = qnn.dense(%362, %363, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0339606f /* ty=float32 */, 0.0121648f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %365 = reshape(%364, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %366 = qnn.quantize(meta[relay.Constant][51] /* ty=Tensor[(1024), float32] */, 0.000413123f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %367 = qnn.add(%365, %366, 0.000413123f /* ty=float32 */, 0 /* ty=int32 */, 0.000413123f /* ty=float32 */, 0 /* ty=int32 */, 0.000413123f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %368 = qnn.requantize(%367, 0.000413123f /* ty=float32 */, 0 /* ty=int32 */, 0.0619893f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %369 = qnn.quantize(%344, 0.412015f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %370 = qnn.dequantize(%368, 0.0619893f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %371 = qnn.dequantize(%369, 0.412015f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %372 = add(%370, %371) /* ty=Tensor[(1, 128, 1024), float32] */;
  %373 = mean(%372, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %374 = subtract(%372, %373) /* ty=Tensor[(1, 128, 1024), float32] */;
  %375 = power(%374, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %376 = mean(%375, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %377 = add(%376, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %378 = sqrt(%377) /* ty=Tensor[(1, 128, 1), float32] */;
  %379 = divide(%374, %378) /* ty=Tensor[(1, 128, 1024), float32] */;
  %380 = multiply(%379, meta[relay.Constant][52] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %381 = add(%380, meta[relay.Constant][53] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %382 = qnn.quantize(%381, 0.0925139f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %383 = qnn.quantize(meta[relay.Constant][54] /* ty=Tensor[(1024, 1024), float32] */, 0.00245029f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %384 = transpose(%383, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %385 = reshape(%382, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %386 = transpose(%384, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %387 = qnn.dense(%385, %386, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0925139f /* ty=float32 */, 0.00245029f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %388 = reshape(%387, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %389 = qnn.quantize(meta[relay.Constant][55] /* ty=Tensor[(1024), float32] */, 0.000226686f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %390 = qnn.add(%388, %389, 0.000226686f /* ty=float32 */, 0 /* ty=int32 */, 0.000226686f /* ty=float32 */, 0 /* ty=int32 */, 0.000226686f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %391 = reshape(%390, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %392 = transpose(%391, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %393 = qnn.requantize(%392, 0.000226686f /* ty=float32 */, 0 /* ty=int32 */, 0.0565915f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %394 = broadcast_to(%393, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %395 = qnn.quantize(%381, 0.0925139f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %396 = qnn.quantize(meta[relay.Constant][56] /* ty=Tensor[(1024, 1024), float32] */, 0.00245029f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %397 = transpose(%396, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %398 = reshape(%395, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %399 = transpose(%397, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %400 = qnn.dense(%398, %399, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0925139f /* ty=float32 */, 0.00245029f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %401 = reshape(%400, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %402 = qnn.quantize(meta[relay.Constant][57] /* ty=Tensor[(1024), float32] */, 0.000226686f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %403 = qnn.add(%401, %402, 0.000226686f /* ty=float32 */, 0 /* ty=int32 */, 0.000226686f /* ty=float32 */, 0 /* ty=int32 */, 0.000226686f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %404 = reshape(%403, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %405 = transpose(%404, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %406 = qnn.requantize(%405, 0.000226686f /* ty=float32 */, 0 /* ty=int32 */, 0.0565915f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %407 = broadcast_to(%406, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %408 = reshape(%407, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %409 = reshape(%394, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %410 = transpose(%408, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %411 = qnn.batch_matmul(%409, %410, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0565915f /* ty=float32 */, 0.0565915f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %412 = reshape(%411, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %413 = qnn.dequantize(%412, 0.0032026f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %414 = divide(%413, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %415 = add(%414, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %416 = nn.softmax(%415, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %417 = qnn.quantize(%416, 0.00731781f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %418 = broadcast_to(%417, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %419 = qnn.quantize(%381, 0.0925139f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %420 = qnn.quantize(meta[relay.Constant][58] /* ty=Tensor[(1024, 1024), float32] */, 0.00245029f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %421 = transpose(%420, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %422 = reshape(%419, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %423 = transpose(%421, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %424 = qnn.dense(%422, %423, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0925139f /* ty=float32 */, 0.00245029f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %425 = reshape(%424, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %426 = qnn.quantize(meta[relay.Constant][59] /* ty=Tensor[(1024), float32] */, 0.000226686f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %427 = qnn.add(%425, %426, 0.000226686f /* ty=float32 */, 0 /* ty=int32 */, 0.000226686f /* ty=float32 */, 0 /* ty=int32 */, 0.000226686f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %428 = reshape(%427, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %429 = transpose(%428, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %430 = qnn.requantize(%429, 0.000226686f /* ty=float32 */, 0 /* ty=int32 */, 0.0565915f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %431 = broadcast_to(%430, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %432 = reshape(%431, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %433 = reshape(%418, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %434 = transpose(%432, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %435 = qnn.batch_matmul(%433, %434, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00731781f /* ty=float32 */, 0.0565915f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %436 = reshape(%435, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %437 = transpose(%436, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %438 = reshape(%437, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %439 = qnn.requantize(%438, 0.000414126f /* ty=float32 */, 0 /* ty=int32 */, 0.0152441f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %440 = qnn.quantize(meta[relay.Constant][60] /* ty=Tensor[(1024, 1024), float32] */, 0.00180424f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %441 = transpose(%440, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %442 = reshape(%439, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %443 = transpose(%441, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %444 = qnn.dense(%442, %443, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0152441f /* ty=float32 */, 0.00180424f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %445 = reshape(%444, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %446 = qnn.quantize(meta[relay.Constant][61] /* ty=Tensor[(1024), float32] */, 2.7504e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %447 = qnn.add(%445, %446, 2.7504e-05f /* ty=float32 */, 0 /* ty=int32 */, 2.7504e-05f /* ty=float32 */, 0 /* ty=int32 */, 2.7504e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %448 = qnn.requantize(%447, 2.7504e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.00857786f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %449 = qnn.quantize(%381, 0.0925139f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %450 = qnn.dequantize(%448, 0.00857786f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %451 = qnn.dequantize(%449, 0.0925139f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %452 = add(%450, %451) /* ty=Tensor[(1, 128, 1024), float32] */;
  %453 = mean(%452, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %454 = subtract(%452, %453) /* ty=Tensor[(1, 128, 1024), float32] */;
  %455 = power(%454, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %456 = mean(%455, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %457 = add(%456, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %458 = sqrt(%457) /* ty=Tensor[(1, 128, 1), float32] */;
  %459 = divide(%454, %458) /* ty=Tensor[(1, 128, 1024), float32] */;
  %460 = multiply(%459, meta[relay.Constant][62] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %461 = add(%460, meta[relay.Constant][63] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %462 = qnn.quantize(%461, 0.410529f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %463 = qnn.quantize(meta[relay.Constant][64] /* ty=Tensor[(4096, 1024), float32] */, 0.0016711f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %464 = transpose(%463, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %465 = reshape(%462, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %466 = transpose(%464, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %467 = qnn.dense(%465, %466, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.410529f /* ty=float32 */, 0.0016711f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %468 = reshape(%467, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %469 = qnn.dequantize(%468, 0.000686036f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %470 = add(%469, meta[relay.Constant][65] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %471 = divide(%470, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %472 = erf(%471) /* ty=Tensor[(1, 128, 4096), float32] */;
  %473 = multiply(%470, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %474 = add(%472, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %475 = multiply(%473, %474) /* ty=Tensor[(1, 128, 4096), float32] */;
  %476 = qnn.quantize(%475, 0.0392786f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %477 = qnn.quantize(meta[relay.Constant][66] /* ty=Tensor[(1024, 4096), float32] */, 0.00480901f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %478 = transpose(%477, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %479 = reshape(%476, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %480 = transpose(%478, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %481 = qnn.dense(%479, %480, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0392786f /* ty=float32 */, 0.00480901f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %482 = reshape(%481, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %483 = qnn.quantize(meta[relay.Constant][67] /* ty=Tensor[(1024), float32] */, 0.000188891f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %484 = qnn.add(%482, %483, 0.000188891f /* ty=float32 */, 0 /* ty=int32 */, 0.000188891f /* ty=float32 */, 0 /* ty=int32 */, 0.000188891f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %485 = qnn.requantize(%484, 0.000188891f /* ty=float32 */, 0 /* ty=int32 */, 0.0459845f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %486 = qnn.quantize(%461, 0.410529f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %487 = qnn.dequantize(%485, 0.0459845f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %488 = qnn.dequantize(%486, 0.410529f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %489 = add(%487, %488) /* ty=Tensor[(1, 128, 1024), float32] */;
  %490 = mean(%489, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %491 = subtract(%489, %490) /* ty=Tensor[(1, 128, 1024), float32] */;
  %492 = power(%491, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %493 = mean(%492, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %494 = add(%493, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %495 = sqrt(%494) /* ty=Tensor[(1, 128, 1), float32] */;
  %496 = divide(%491, %495) /* ty=Tensor[(1, 128, 1024), float32] */;
  %497 = multiply(%496, meta[relay.Constant][68] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %498 = add(%497, meta[relay.Constant][69] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %499 = qnn.quantize(%498, 0.0723975f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %500 = qnn.quantize(meta[relay.Constant][70] /* ty=Tensor[(1024, 1024), float32] */, 0.00255864f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %501 = transpose(%500, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %502 = reshape(%499, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %503 = transpose(%501, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %504 = qnn.dense(%502, %503, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0723975f /* ty=float32 */, 0.00255864f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %505 = reshape(%504, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %506 = qnn.quantize(meta[relay.Constant][71] /* ty=Tensor[(1024), float32] */, 0.00018524f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %507 = qnn.add(%505, %506, 0.00018524f /* ty=float32 */, 0 /* ty=int32 */, 0.00018524f /* ty=float32 */, 0 /* ty=int32 */, 0.00018524f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %508 = reshape(%507, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %509 = transpose(%508, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %510 = qnn.requantize(%509, 0.00018524f /* ty=float32 */, 0 /* ty=int32 */, 0.0522046f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %511 = broadcast_to(%510, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %512 = qnn.quantize(%498, 0.0723975f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %513 = qnn.quantize(meta[relay.Constant][72] /* ty=Tensor[(1024, 1024), float32] */, 0.00255864f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %514 = transpose(%513, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %515 = reshape(%512, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %516 = transpose(%514, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %517 = qnn.dense(%515, %516, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0723975f /* ty=float32 */, 0.00255864f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %518 = reshape(%517, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %519 = qnn.quantize(meta[relay.Constant][73] /* ty=Tensor[(1024), float32] */, 0.00018524f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %520 = qnn.add(%518, %519, 0.00018524f /* ty=float32 */, 0 /* ty=int32 */, 0.00018524f /* ty=float32 */, 0 /* ty=int32 */, 0.00018524f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %521 = reshape(%520, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %522 = transpose(%521, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %523 = qnn.requantize(%522, 0.00018524f /* ty=float32 */, 0 /* ty=int32 */, 0.0522046f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %524 = broadcast_to(%523, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %525 = reshape(%524, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %526 = reshape(%511, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %527 = transpose(%525, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %528 = qnn.batch_matmul(%526, %527, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0522046f /* ty=float32 */, 0.0522046f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %529 = reshape(%528, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %530 = qnn.dequantize(%529, 0.00272532f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %531 = divide(%530, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %532 = add(%531, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %533 = nn.softmax(%532, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %534 = qnn.quantize(%533, 0.00633571f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %535 = broadcast_to(%534, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %536 = qnn.quantize(%498, 0.0723975f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %537 = qnn.quantize(meta[relay.Constant][74] /* ty=Tensor[(1024, 1024), float32] */, 0.00255864f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %538 = transpose(%537, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %539 = reshape(%536, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %540 = transpose(%538, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %541 = qnn.dense(%539, %540, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0723975f /* ty=float32 */, 0.00255864f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %542 = reshape(%541, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %543 = qnn.quantize(meta[relay.Constant][75] /* ty=Tensor[(1024), float32] */, 0.00018524f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %544 = qnn.add(%542, %543, 0.00018524f /* ty=float32 */, 0 /* ty=int32 */, 0.00018524f /* ty=float32 */, 0 /* ty=int32 */, 0.00018524f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %545 = reshape(%544, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %546 = transpose(%545, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %547 = qnn.requantize(%546, 0.00018524f /* ty=float32 */, 0 /* ty=int32 */, 0.0522046f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %548 = broadcast_to(%547, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %549 = reshape(%548, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %550 = reshape(%535, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %551 = transpose(%549, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %552 = qnn.batch_matmul(%550, %551, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00633571f /* ty=float32 */, 0.0522046f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %553 = reshape(%552, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %554 = transpose(%553, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %555 = reshape(%554, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %556 = qnn.requantize(%555, 0.000330753f /* ty=float32 */, 0 /* ty=int32 */, 0.0119105f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %557 = qnn.quantize(meta[relay.Constant][76] /* ty=Tensor[(1024, 1024), float32] */, 0.00170374f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %558 = transpose(%557, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %559 = reshape(%556, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %560 = transpose(%558, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %561 = qnn.dense(%559, %560, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0119105f /* ty=float32 */, 0.00170374f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %562 = reshape(%561, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %563 = qnn.quantize(meta[relay.Constant][77] /* ty=Tensor[(1024), float32] */, 2.02923e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %564 = qnn.add(%562, %563, 2.02923e-05f /* ty=float32 */, 0 /* ty=int32 */, 2.02923e-05f /* ty=float32 */, 0 /* ty=int32 */, 2.02923e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %565 = qnn.requantize(%564, 2.02923e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.00690104f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %566 = qnn.quantize(%498, 0.0723975f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %567 = qnn.dequantize(%565, 0.00690104f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %568 = qnn.dequantize(%566, 0.0723975f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %569 = add(%567, %568) /* ty=Tensor[(1, 128, 1024), float32] */;
  %570 = mean(%569, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %571 = subtract(%569, %570) /* ty=Tensor[(1, 128, 1024), float32] */;
  %572 = power(%571, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %573 = mean(%572, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %574 = add(%573, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %575 = sqrt(%574) /* ty=Tensor[(1, 128, 1), float32] */;
  %576 = divide(%571, %575) /* ty=Tensor[(1, 128, 1024), float32] */;
  %577 = multiply(%576, meta[relay.Constant][78] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %578 = add(%577, meta[relay.Constant][79] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %579 = qnn.quantize(%578, 0.373825f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %580 = qnn.quantize(meta[relay.Constant][80] /* ty=Tensor[(4096, 1024), float32] */, 0.00279877f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %581 = transpose(%580, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %582 = reshape(%579, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %583 = transpose(%581, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %584 = qnn.dense(%582, %583, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.373825f /* ty=float32 */, 0.00279877f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %585 = reshape(%584, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %586 = qnn.dequantize(%585, 0.00104625f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %587 = add(%586, meta[relay.Constant][81] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %588 = divide(%587, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %589 = erf(%588) /* ty=Tensor[(1, 128, 4096), float32] */;
  %590 = multiply(%587, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %591 = add(%589, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %592 = multiply(%590, %591) /* ty=Tensor[(1, 128, 4096), float32] */;
  %593 = qnn.quantize(%592, 0.0290915f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %594 = qnn.quantize(meta[relay.Constant][82] /* ty=Tensor[(1024, 4096), float32] */, 0.0254855f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %595 = transpose(%594, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %596 = reshape(%593, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %597 = transpose(%595, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %598 = qnn.dense(%596, %597, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0290915f /* ty=float32 */, 0.0254855f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %599 = reshape(%598, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %600 = qnn.quantize(meta[relay.Constant][83] /* ty=Tensor[(1024), float32] */, 0.000741412f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %601 = qnn.add(%599, %600, 0.000741412f /* ty=float32 */, 0 /* ty=int32 */, 0.000741412f /* ty=float32 */, 0 /* ty=int32 */, 0.000741412f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %602 = qnn.requantize(%601, 0.000741412f /* ty=float32 */, 0 /* ty=int32 */, 0.170751f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %603 = qnn.quantize(%578, 0.373825f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %604 = qnn.dequantize(%602, 0.170751f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %605 = qnn.dequantize(%603, 0.373825f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %606 = add(%604, %605) /* ty=Tensor[(1, 128, 1024), float32] */;
  %607 = mean(%606, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %608 = subtract(%606, %607) /* ty=Tensor[(1, 128, 1024), float32] */;
  %609 = power(%608, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %610 = mean(%609, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %611 = add(%610, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %612 = sqrt(%611) /* ty=Tensor[(1, 128, 1), float32] */;
  %613 = divide(%608, %612) /* ty=Tensor[(1, 128, 1024), float32] */;
  %614 = multiply(%613, meta[relay.Constant][84] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %615 = add(%614, meta[relay.Constant][85] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %616 = qnn.quantize(%615, 0.0570178f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %617 = qnn.quantize(meta[relay.Constant][86] /* ty=Tensor[(1024, 1024), float32] */, 0.00277596f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %618 = transpose(%617, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %619 = reshape(%616, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %620 = transpose(%618, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %621 = qnn.dense(%619, %620, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0570178f /* ty=float32 */, 0.00277596f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %622 = reshape(%621, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %623 = qnn.quantize(meta[relay.Constant][87] /* ty=Tensor[(1024), float32] */, 0.000158279f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %624 = qnn.add(%622, %623, 0.000158279f /* ty=float32 */, 0 /* ty=int32 */, 0.000158279f /* ty=float32 */, 0 /* ty=int32 */, 0.000158279f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %625 = reshape(%624, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %626 = transpose(%625, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %627 = qnn.requantize(%626, 0.000158279f /* ty=float32 */, 0 /* ty=int32 */, 0.0442562f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %628 = broadcast_to(%627, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %629 = qnn.quantize(%615, 0.0570178f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %630 = qnn.quantize(meta[relay.Constant][88] /* ty=Tensor[(1024, 1024), float32] */, 0.00277596f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %631 = transpose(%630, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %632 = reshape(%629, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %633 = transpose(%631, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %634 = qnn.dense(%632, %633, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0570178f /* ty=float32 */, 0.00277596f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %635 = reshape(%634, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %636 = qnn.quantize(meta[relay.Constant][89] /* ty=Tensor[(1024), float32] */, 0.000158279f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %637 = qnn.add(%635, %636, 0.000158279f /* ty=float32 */, 0 /* ty=int32 */, 0.000158279f /* ty=float32 */, 0 /* ty=int32 */, 0.000158279f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %638 = reshape(%637, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %639 = transpose(%638, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %640 = qnn.requantize(%639, 0.000158279f /* ty=float32 */, 0 /* ty=int32 */, 0.0442562f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %641 = broadcast_to(%640, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %642 = reshape(%641, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %643 = reshape(%628, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %644 = transpose(%642, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %645 = qnn.batch_matmul(%643, %644, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0442562f /* ty=float32 */, 0.0442562f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %646 = reshape(%645, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %647 = qnn.dequantize(%646, 0.00195861f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %648 = divide(%647, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %649 = add(%648, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %650 = nn.softmax(%649, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %651 = qnn.quantize(%650, 0.00306637f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %652 = broadcast_to(%651, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %653 = qnn.quantize(%615, 0.0570178f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %654 = qnn.quantize(meta[relay.Constant][90] /* ty=Tensor[(1024, 1024), float32] */, 0.00277596f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %655 = transpose(%654, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %656 = reshape(%653, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %657 = transpose(%655, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %658 = qnn.dense(%656, %657, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0570178f /* ty=float32 */, 0.00277596f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %659 = reshape(%658, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %660 = qnn.quantize(meta[relay.Constant][91] /* ty=Tensor[(1024), float32] */, 0.000158279f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %661 = qnn.add(%659, %660, 0.000158279f /* ty=float32 */, 0 /* ty=int32 */, 0.000158279f /* ty=float32 */, 0 /* ty=int32 */, 0.000158279f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %662 = reshape(%661, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %663 = transpose(%662, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %664 = qnn.requantize(%663, 0.000158279f /* ty=float32 */, 0 /* ty=int32 */, 0.0442562f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %665 = broadcast_to(%664, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %666 = reshape(%665, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %667 = reshape(%652, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %668 = transpose(%666, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %669 = qnn.batch_matmul(%667, %668, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00306637f /* ty=float32 */, 0.0442562f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %670 = reshape(%669, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %671 = transpose(%670, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %672 = reshape(%671, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %673 = qnn.requantize(%672, 0.000135706f /* ty=float32 */, 0 /* ty=int32 */, 0.0123824f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %674 = qnn.quantize(meta[relay.Constant][92] /* ty=Tensor[(1024, 1024), float32] */, 0.00198406f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %675 = transpose(%674, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %676 = reshape(%673, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %677 = transpose(%675, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %678 = qnn.dense(%676, %677, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0123824f /* ty=float32 */, 0.00198406f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %679 = reshape(%678, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %680 = qnn.quantize(meta[relay.Constant][93] /* ty=Tensor[(1024), float32] */, 2.45674e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %681 = qnn.add(%679, %680, 2.45674e-05f /* ty=float32 */, 0 /* ty=int32 */, 2.45674e-05f /* ty=float32 */, 0 /* ty=int32 */, 2.45674e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %682 = qnn.requantize(%681, 2.45674e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.00689865f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %683 = qnn.quantize(%615, 0.0570178f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %684 = qnn.dequantize(%682, 0.00689865f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %685 = qnn.dequantize(%683, 0.0570178f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %686 = add(%684, %685) /* ty=Tensor[(1, 128, 1024), float32] */;
  %687 = mean(%686, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %688 = subtract(%686, %687) /* ty=Tensor[(1, 128, 1024), float32] */;
  %689 = power(%688, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %690 = mean(%689, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %691 = add(%690, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %692 = sqrt(%691) /* ty=Tensor[(1, 128, 1), float32] */;
  %693 = divide(%688, %692) /* ty=Tensor[(1, 128, 1024), float32] */;
  %694 = multiply(%693, meta[relay.Constant][94] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %695 = add(%694, meta[relay.Constant][95] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %696 = qnn.quantize(%695, 0.342797f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %697 = qnn.quantize(meta[relay.Constant][96] /* ty=Tensor[(4096, 1024), float32] */, 0.00205274f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %698 = transpose(%697, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %699 = reshape(%696, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %700 = transpose(%698, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %701 = qnn.dense(%699, %700, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.342797f /* ty=float32 */, 0.00205274f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %702 = reshape(%701, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %703 = qnn.dequantize(%702, 0.000703671f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %704 = add(%703, meta[relay.Constant][97] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %705 = divide(%704, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %706 = erf(%705) /* ty=Tensor[(1, 128, 4096), float32] */;
  %707 = multiply(%704, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %708 = add(%706, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %709 = multiply(%707, %708) /* ty=Tensor[(1, 128, 4096), float32] */;
  %710 = qnn.quantize(%709, 0.0360953f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %711 = qnn.quantize(meta[relay.Constant][98] /* ty=Tensor[(1024, 4096), float32] */, 0.0246704f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %712 = transpose(%711, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %713 = reshape(%710, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %714 = transpose(%712, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %715 = qnn.dense(%713, %714, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0360953f /* ty=float32 */, 0.0246704f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %716 = reshape(%715, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %717 = qnn.quantize(meta[relay.Constant][99] /* ty=Tensor[(1024), float32] */, 0.000890484f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %718 = qnn.add(%716, %717, 0.000890484f /* ty=float32 */, 0 /* ty=int32 */, 0.000890484f /* ty=float32 */, 0 /* ty=int32 */, 0.000890484f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %719 = qnn.requantize(%718, 0.000890484f /* ty=float32 */, 0 /* ty=int32 */, 0.0479473f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %720 = qnn.quantize(%695, 0.342797f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %721 = qnn.dequantize(%719, 0.0479473f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %722 = qnn.dequantize(%720, 0.342797f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %723 = add(%721, %722) /* ty=Tensor[(1, 128, 1024), float32] */;
  %724 = mean(%723, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %725 = subtract(%723, %724) /* ty=Tensor[(1, 128, 1024), float32] */;
  %726 = power(%725, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %727 = mean(%726, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %728 = add(%727, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %729 = sqrt(%728) /* ty=Tensor[(1, 128, 1), float32] */;
  %730 = divide(%725, %729) /* ty=Tensor[(1, 128, 1024), float32] */;
  %731 = multiply(%730, meta[relay.Constant][100] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %732 = add(%731, meta[relay.Constant][101] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %733 = qnn.quantize(%732, 0.0376433f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %734 = qnn.quantize(meta[relay.Constant][102] /* ty=Tensor[(1024, 1024), float32] */, 0.00465423f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %735 = transpose(%734, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %736 = reshape(%733, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %737 = transpose(%735, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %738 = qnn.dense(%736, %737, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0376433f /* ty=float32 */, 0.00465423f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %739 = reshape(%738, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %740 = qnn.quantize(meta[relay.Constant][103] /* ty=Tensor[(1024), float32] */, 0.0001752f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %741 = qnn.add(%739, %740, 0.0001752f /* ty=float32 */, 0 /* ty=int32 */, 0.0001752f /* ty=float32 */, 0 /* ty=int32 */, 0.0001752f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %742 = reshape(%741, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %743 = transpose(%742, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %744 = qnn.requantize(%743, 0.0001752f /* ty=float32 */, 0 /* ty=int32 */, 0.0462181f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %745 = broadcast_to(%744, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %746 = qnn.quantize(%732, 0.0376433f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %747 = qnn.quantize(meta[relay.Constant][104] /* ty=Tensor[(1024, 1024), float32] */, 0.00465423f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %748 = transpose(%747, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %749 = reshape(%746, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %750 = transpose(%748, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %751 = qnn.dense(%749, %750, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0376433f /* ty=float32 */, 0.00465423f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %752 = reshape(%751, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %753 = qnn.quantize(meta[relay.Constant][105] /* ty=Tensor[(1024), float32] */, 0.0001752f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %754 = qnn.add(%752, %753, 0.0001752f /* ty=float32 */, 0 /* ty=int32 */, 0.0001752f /* ty=float32 */, 0 /* ty=int32 */, 0.0001752f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %755 = reshape(%754, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %756 = transpose(%755, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %757 = qnn.requantize(%756, 0.0001752f /* ty=float32 */, 0 /* ty=int32 */, 0.0462181f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %758 = broadcast_to(%757, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %759 = reshape(%758, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %760 = reshape(%745, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %761 = transpose(%759, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %762 = qnn.batch_matmul(%760, %761, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0462181f /* ty=float32 */, 0.0462181f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %763 = reshape(%762, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %764 = qnn.dequantize(%763, 0.00213611f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %765 = divide(%764, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %766 = add(%765, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %767 = nn.softmax(%766, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %768 = qnn.quantize(%767, 0.00385231f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %769 = broadcast_to(%768, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %770 = qnn.quantize(%732, 0.0376433f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %771 = qnn.quantize(meta[relay.Constant][106] /* ty=Tensor[(1024, 1024), float32] */, 0.00465423f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %772 = transpose(%771, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %773 = reshape(%770, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %774 = transpose(%772, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %775 = qnn.dense(%773, %774, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0376433f /* ty=float32 */, 0.00465423f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %776 = reshape(%775, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %777 = qnn.quantize(meta[relay.Constant][107] /* ty=Tensor[(1024), float32] */, 0.0001752f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %778 = qnn.add(%776, %777, 0.0001752f /* ty=float32 */, 0 /* ty=int32 */, 0.0001752f /* ty=float32 */, 0 /* ty=int32 */, 0.0001752f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %779 = reshape(%778, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %780 = transpose(%779, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %781 = qnn.requantize(%780, 0.0001752f /* ty=float32 */, 0 /* ty=int32 */, 0.0462181f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %782 = broadcast_to(%781, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %783 = reshape(%782, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %784 = reshape(%769, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %785 = transpose(%783, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %786 = qnn.batch_matmul(%784, %785, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00385231f /* ty=float32 */, 0.0462181f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %787 = reshape(%786, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %788 = transpose(%787, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %789 = reshape(%788, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %790 = qnn.requantize(%789, 0.000178046f /* ty=float32 */, 0 /* ty=int32 */, 0.0117556f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %791 = qnn.quantize(meta[relay.Constant][108] /* ty=Tensor[(1024, 1024), float32] */, 0.00226222f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %792 = transpose(%791, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %793 = reshape(%790, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %794 = transpose(%792, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %795 = qnn.dense(%793, %794, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0117556f /* ty=float32 */, 0.00226222f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %796 = reshape(%795, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %797 = qnn.quantize(meta[relay.Constant][109] /* ty=Tensor[(1024), float32] */, 2.65938e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %798 = qnn.add(%796, %797, 2.65938e-05f /* ty=float32 */, 0 /* ty=int32 */, 2.65938e-05f /* ty=float32 */, 0 /* ty=int32 */, 2.65938e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %799 = qnn.requantize(%798, 2.65938e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.00779474f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %800 = qnn.quantize(%732, 0.0376433f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %801 = qnn.dequantize(%799, 0.00779474f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %802 = qnn.dequantize(%800, 0.0376433f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %803 = add(%801, %802) /* ty=Tensor[(1, 128, 1024), float32] */;
  %804 = mean(%803, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %805 = subtract(%803, %804) /* ty=Tensor[(1, 128, 1024), float32] */;
  %806 = power(%805, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %807 = mean(%806, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %808 = add(%807, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %809 = sqrt(%808) /* ty=Tensor[(1, 128, 1), float32] */;
  %810 = divide(%805, %809) /* ty=Tensor[(1, 128, 1024), float32] */;
  %811 = multiply(%810, meta[relay.Constant][110] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %812 = add(%811, meta[relay.Constant][111] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %813 = qnn.quantize(%812, 0.308393f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %814 = qnn.quantize(meta[relay.Constant][112] /* ty=Tensor[(4096, 1024), float32] */, 0.00225818f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %815 = transpose(%814, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %816 = reshape(%813, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %817 = transpose(%815, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %818 = qnn.dense(%816, %817, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.308393f /* ty=float32 */, 0.00225818f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %819 = reshape(%818, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %820 = qnn.dequantize(%819, 0.000696408f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %821 = add(%820, meta[relay.Constant][113] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %822 = divide(%821, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %823 = erf(%822) /* ty=Tensor[(1, 128, 4096), float32] */;
  %824 = multiply(%821, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %825 = add(%823, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %826 = multiply(%824, %825) /* ty=Tensor[(1, 128, 4096), float32] */;
  %827 = qnn.quantize(%826, 0.0305913f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %828 = qnn.quantize(meta[relay.Constant][114] /* ty=Tensor[(1024, 4096), float32] */, 0.0284077f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %829 = transpose(%828, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %830 = reshape(%827, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %831 = transpose(%829, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %832 = qnn.dense(%830, %831, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0305913f /* ty=float32 */, 0.0284077f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %833 = reshape(%832, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %834 = qnn.quantize(meta[relay.Constant][115] /* ty=Tensor[(1024), float32] */, 0.000869029f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %835 = qnn.add(%833, %834, 0.000869029f /* ty=float32 */, 0 /* ty=int32 */, 0.000869029f /* ty=float32 */, 0 /* ty=int32 */, 0.000869029f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %836 = qnn.requantize(%835, 0.000869029f /* ty=float32 */, 0 /* ty=int32 */, 0.281755f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %837 = qnn.quantize(%812, 0.308393f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %838 = qnn.dequantize(%836, 0.281755f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %839 = qnn.dequantize(%837, 0.308393f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %840 = add(%838, %839) /* ty=Tensor[(1, 128, 1024), float32] */;
  %841 = mean(%840, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %842 = subtract(%840, %841) /* ty=Tensor[(1, 128, 1024), float32] */;
  %843 = power(%842, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %844 = mean(%843, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %845 = add(%844, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %846 = sqrt(%845) /* ty=Tensor[(1, 128, 1), float32] */;
  %847 = divide(%842, %846) /* ty=Tensor[(1, 128, 1024), float32] */;
  %848 = multiply(%847, meta[relay.Constant][116] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %849 = add(%848, meta[relay.Constant][117] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %850 = qnn.quantize(%849, 0.0786346f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %851 = qnn.quantize(meta[relay.Constant][118] /* ty=Tensor[(1024, 1024), float32] */, 0.0029697f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %852 = transpose(%851, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %853 = reshape(%850, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %854 = transpose(%852, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %855 = qnn.dense(%853, %854, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0786346f /* ty=float32 */, 0.0029697f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %856 = reshape(%855, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %857 = qnn.quantize(meta[relay.Constant][119] /* ty=Tensor[(1024), float32] */, 0.000233521f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %858 = qnn.add(%856, %857, 0.000233521f /* ty=float32 */, 0 /* ty=int32 */, 0.000233521f /* ty=float32 */, 0 /* ty=int32 */, 0.000233521f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %859 = reshape(%858, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %860 = transpose(%859, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %861 = qnn.requantize(%860, 0.000233521f /* ty=float32 */, 0 /* ty=int32 */, 0.0462451f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %862 = broadcast_to(%861, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %863 = qnn.quantize(%849, 0.0786346f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %864 = qnn.quantize(meta[relay.Constant][120] /* ty=Tensor[(1024, 1024), float32] */, 0.0029697f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %865 = transpose(%864, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %866 = reshape(%863, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %867 = transpose(%865, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %868 = qnn.dense(%866, %867, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0786346f /* ty=float32 */, 0.0029697f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %869 = reshape(%868, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %870 = qnn.quantize(meta[relay.Constant][121] /* ty=Tensor[(1024), float32] */, 0.000233521f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %871 = qnn.add(%869, %870, 0.000233521f /* ty=float32 */, 0 /* ty=int32 */, 0.000233521f /* ty=float32 */, 0 /* ty=int32 */, 0.000233521f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %872 = reshape(%871, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %873 = transpose(%872, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %874 = qnn.requantize(%873, 0.000233521f /* ty=float32 */, 0 /* ty=int32 */, 0.0462451f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %875 = broadcast_to(%874, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %876 = reshape(%875, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %877 = reshape(%862, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %878 = transpose(%876, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %879 = qnn.batch_matmul(%877, %878, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0462451f /* ty=float32 */, 0.0462451f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %880 = reshape(%879, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %881 = qnn.dequantize(%880, 0.00213861f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %882 = divide(%881, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %883 = add(%882, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %884 = nn.softmax(%883, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %885 = qnn.quantize(%884, 0.0039589f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %886 = broadcast_to(%885, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %887 = qnn.quantize(%849, 0.0786346f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %888 = qnn.quantize(meta[relay.Constant][122] /* ty=Tensor[(1024, 1024), float32] */, 0.0029697f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %889 = transpose(%888, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %890 = reshape(%887, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %891 = transpose(%889, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %892 = qnn.dense(%890, %891, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0786346f /* ty=float32 */, 0.0029697f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %893 = reshape(%892, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %894 = qnn.quantize(meta[relay.Constant][123] /* ty=Tensor[(1024), float32] */, 0.000233521f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %895 = qnn.add(%893, %894, 0.000233521f /* ty=float32 */, 0 /* ty=int32 */, 0.000233521f /* ty=float32 */, 0 /* ty=int32 */, 0.000233521f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %896 = reshape(%895, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %897 = transpose(%896, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %898 = qnn.requantize(%897, 0.000233521f /* ty=float32 */, 0 /* ty=int32 */, 0.0462451f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %899 = broadcast_to(%898, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %900 = reshape(%899, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %901 = reshape(%886, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %902 = transpose(%900, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %903 = qnn.batch_matmul(%901, %902, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0039589f /* ty=float32 */, 0.0462451f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %904 = reshape(%903, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %905 = transpose(%904, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %906 = reshape(%905, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %907 = qnn.requantize(%906, 0.00018308f /* ty=float32 */, 0 /* ty=int32 */, 0.0119981f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %908 = qnn.quantize(meta[relay.Constant][124] /* ty=Tensor[(1024, 1024), float32] */, 0.00199037f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %909 = transpose(%908, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %910 = reshape(%907, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %911 = transpose(%909, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %912 = qnn.dense(%910, %911, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0119981f /* ty=float32 */, 0.00199037f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %913 = reshape(%912, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %914 = qnn.quantize(meta[relay.Constant][125] /* ty=Tensor[(1024), float32] */, 2.38807e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %915 = qnn.add(%913, %914, 2.38807e-05f /* ty=float32 */, 0 /* ty=int32 */, 2.38807e-05f /* ty=float32 */, 0 /* ty=int32 */, 2.38807e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %916 = qnn.requantize(%915, 2.38807e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.00774295f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %917 = qnn.quantize(%849, 0.0786346f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %918 = qnn.dequantize(%916, 0.00774295f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %919 = qnn.dequantize(%917, 0.0786346f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %920 = add(%918, %919) /* ty=Tensor[(1, 128, 1024), float32] */;
  %921 = mean(%920, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %922 = subtract(%920, %921) /* ty=Tensor[(1, 128, 1024), float32] */;
  %923 = power(%922, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %924 = mean(%923, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %925 = add(%924, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %926 = sqrt(%925) /* ty=Tensor[(1, 128, 1), float32] */;
  %927 = divide(%922, %926) /* ty=Tensor[(1, 128, 1024), float32] */;
  %928 = multiply(%927, meta[relay.Constant][126] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %929 = add(%928, meta[relay.Constant][127] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %930 = qnn.quantize(%929, 0.391564f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %931 = qnn.quantize(meta[relay.Constant][128] /* ty=Tensor[(4096, 1024), float32] */, 0.0020522f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %932 = transpose(%931, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %933 = reshape(%930, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %934 = transpose(%932, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %935 = qnn.dense(%933, %934, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.391564f /* ty=float32 */, 0.0020522f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %936 = reshape(%935, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %937 = qnn.dequantize(%936, 0.000803569f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %938 = add(%937, meta[relay.Constant][129] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %939 = divide(%938, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %940 = erf(%939) /* ty=Tensor[(1, 128, 4096), float32] */;
  %941 = multiply(%938, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %942 = add(%940, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %943 = multiply(%941, %942) /* ty=Tensor[(1, 128, 4096), float32] */;
  %944 = qnn.quantize(%943, 0.0300526f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %945 = qnn.quantize(meta[relay.Constant][130] /* ty=Tensor[(1024, 4096), float32] */, 0.0223118f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %946 = transpose(%945, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %947 = reshape(%944, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %948 = transpose(%946, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %949 = qnn.dense(%947, %948, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0300526f /* ty=float32 */, 0.0223118f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %950 = reshape(%949, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %951 = qnn.quantize(meta[relay.Constant][131] /* ty=Tensor[(1024), float32] */, 0.000670525f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %952 = qnn.add(%950, %951, 0.000670525f /* ty=float32 */, 0 /* ty=int32 */, 0.000670525f /* ty=float32 */, 0 /* ty=int32 */, 0.000670525f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %953 = qnn.requantize(%952, 0.000670525f /* ty=float32 */, 0 /* ty=int32 */, 0.303068f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %954 = qnn.quantize(%929, 0.391564f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %955 = qnn.dequantize(%953, 0.303068f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %956 = qnn.dequantize(%954, 0.391564f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %957 = add(%955, %956) /* ty=Tensor[(1, 128, 1024), float32] */;
  %958 = mean(%957, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %959 = subtract(%957, %958) /* ty=Tensor[(1, 128, 1024), float32] */;
  %960 = power(%959, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %961 = mean(%960, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %962 = add(%961, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %963 = sqrt(%962) /* ty=Tensor[(1, 128, 1), float32] */;
  %964 = divide(%959, %963) /* ty=Tensor[(1, 128, 1024), float32] */;
  %965 = multiply(%964, meta[relay.Constant][132] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %966 = add(%965, meta[relay.Constant][133] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %967 = qnn.quantize(%966, 0.0886639f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %968 = qnn.quantize(meta[relay.Constant][134] /* ty=Tensor[(1024, 1024), float32] */, 0.00381439f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %969 = transpose(%968, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %970 = reshape(%967, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %971 = transpose(%969, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %972 = qnn.dense(%970, %971, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0886639f /* ty=float32 */, 0.00381439f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %973 = reshape(%972, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %974 = qnn.quantize(meta[relay.Constant][135] /* ty=Tensor[(1024), float32] */, 0.000338198f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %975 = qnn.add(%973, %974, 0.000338198f /* ty=float32 */, 0 /* ty=int32 */, 0.000338198f /* ty=float32 */, 0 /* ty=int32 */, 0.000338198f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %976 = reshape(%975, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %977 = transpose(%976, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %978 = qnn.requantize(%977, 0.000338198f /* ty=float32 */, 0 /* ty=int32 */, 0.0425089f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %979 = broadcast_to(%978, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %980 = qnn.quantize(%966, 0.0886639f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %981 = qnn.quantize(meta[relay.Constant][136] /* ty=Tensor[(1024, 1024), float32] */, 0.00381439f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %982 = transpose(%981, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %983 = reshape(%980, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %984 = transpose(%982, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %985 = qnn.dense(%983, %984, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0886639f /* ty=float32 */, 0.00381439f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %986 = reshape(%985, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %987 = qnn.quantize(meta[relay.Constant][137] /* ty=Tensor[(1024), float32] */, 0.000338198f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %988 = qnn.add(%986, %987, 0.000338198f /* ty=float32 */, 0 /* ty=int32 */, 0.000338198f /* ty=float32 */, 0 /* ty=int32 */, 0.000338198f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %989 = reshape(%988, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %990 = transpose(%989, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %991 = qnn.requantize(%990, 0.000338198f /* ty=float32 */, 0 /* ty=int32 */, 0.0425089f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %992 = broadcast_to(%991, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %993 = reshape(%992, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %994 = reshape(%979, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %995 = transpose(%993, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %996 = qnn.batch_matmul(%994, %995, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0425089f /* ty=float32 */, 0.0425089f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %997 = reshape(%996, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %998 = qnn.dequantize(%997, 0.001807f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %999 = divide(%998, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1000 = add(%999, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1001 = nn.softmax(%1000, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1002 = qnn.quantize(%1001, 0.00459393f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1003 = broadcast_to(%1002, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1004 = qnn.quantize(%966, 0.0886639f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1005 = qnn.quantize(meta[relay.Constant][138] /* ty=Tensor[(1024, 1024), float32] */, 0.00381439f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1006 = transpose(%1005, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1007 = reshape(%1004, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1008 = transpose(%1006, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1009 = qnn.dense(%1007, %1008, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0886639f /* ty=float32 */, 0.00381439f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1010 = reshape(%1009, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1011 = qnn.quantize(meta[relay.Constant][139] /* ty=Tensor[(1024), float32] */, 0.000338198f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1012 = qnn.add(%1010, %1011, 0.000338198f /* ty=float32 */, 0 /* ty=int32 */, 0.000338198f /* ty=float32 */, 0 /* ty=int32 */, 0.000338198f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1013 = reshape(%1012, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1014 = transpose(%1013, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1015 = qnn.requantize(%1014, 0.000338198f /* ty=float32 */, 0 /* ty=int32 */, 0.0425089f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1016 = broadcast_to(%1015, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1017 = reshape(%1016, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1018 = reshape(%1003, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %1019 = transpose(%1017, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %1020 = qnn.batch_matmul(%1018, %1019, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00459393f /* ty=float32 */, 0.0425089f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %1021 = reshape(%1020, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1022 = transpose(%1021, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1023 = reshape(%1022, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1024 = qnn.requantize(%1023, 0.000195283f /* ty=float32 */, 0 /* ty=int32 */, 0.0122099f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1025 = qnn.quantize(meta[relay.Constant][140] /* ty=Tensor[(1024, 1024), float32] */, 0.00458827f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1026 = transpose(%1025, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1027 = reshape(%1024, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1028 = transpose(%1026, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1029 = qnn.dense(%1027, %1028, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0122099f /* ty=float32 */, 0.00458827f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1030 = reshape(%1029, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1031 = qnn.quantize(meta[relay.Constant][141] /* ty=Tensor[(1024), float32] */, 5.60226e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1032 = qnn.add(%1030, %1031, 5.60226e-05f /* ty=float32 */, 0 /* ty=int32 */, 5.60226e-05f /* ty=float32 */, 0 /* ty=int32 */, 5.60226e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1033 = qnn.requantize(%1032, 5.60226e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.00903966f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1034 = qnn.quantize(%966, 0.0886639f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1035 = qnn.dequantize(%1033, 0.00903966f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1036 = qnn.dequantize(%1034, 0.0886639f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1037 = add(%1035, %1036) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1038 = mean(%1037, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1039 = subtract(%1037, %1038) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1040 = power(%1039, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1041 = mean(%1040, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1042 = add(%1041, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1043 = sqrt(%1042) /* ty=Tensor[(1, 128, 1), float32] */;
  %1044 = divide(%1039, %1043) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1045 = multiply(%1044, meta[relay.Constant][142] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1046 = add(%1045, meta[relay.Constant][143] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1047 = qnn.quantize(%1046, 0.501616f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1048 = qnn.quantize(meta[relay.Constant][144] /* ty=Tensor[(4096, 1024), float32] */, 0.00220706f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %1049 = transpose(%1048, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %1050 = reshape(%1047, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1051 = transpose(%1049, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %1052 = qnn.dense(%1050, %1051, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.501616f /* ty=float32 */, 0.00220706f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %1053 = reshape(%1052, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %1054 = qnn.dequantize(%1053, 0.0011071f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1055 = add(%1054, meta[relay.Constant][145] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1056 = divide(%1055, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1057 = erf(%1056) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1058 = multiply(%1055, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1059 = add(%1057, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1060 = multiply(%1058, %1059) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1061 = qnn.quantize(%1060, 0.0257185f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %1062 = qnn.quantize(meta[relay.Constant][146] /* ty=Tensor[(1024, 4096), float32] */, 0.0184537f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %1063 = transpose(%1062, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %1064 = reshape(%1061, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %1065 = transpose(%1063, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %1066 = qnn.dense(%1064, %1065, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0257185f /* ty=float32 */, 0.0184537f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1067 = reshape(%1066, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1068 = qnn.quantize(meta[relay.Constant][147] /* ty=Tensor[(1024), float32] */, 0.000474602f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1069 = qnn.add(%1067, %1068, 0.000474602f /* ty=float32 */, 0 /* ty=int32 */, 0.000474602f /* ty=float32 */, 0 /* ty=int32 */, 0.000474602f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1070 = qnn.requantize(%1069, 0.000474602f /* ty=float32 */, 0 /* ty=int32 */, 0.0416904f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1071 = qnn.quantize(%1046, 0.501616f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1072 = qnn.dequantize(%1070, 0.0416904f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1073 = qnn.dequantize(%1071, 0.501616f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1074 = add(%1072, %1073) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1075 = mean(%1074, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1076 = subtract(%1074, %1075) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1077 = power(%1076, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1078 = mean(%1077, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1079 = add(%1078, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1080 = sqrt(%1079) /* ty=Tensor[(1, 128, 1), float32] */;
  %1081 = divide(%1076, %1080) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1082 = multiply(%1081, meta[relay.Constant][148] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1083 = add(%1082, meta[relay.Constant][149] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1084 = qnn.quantize(%1083, 0.12236f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1085 = qnn.quantize(meta[relay.Constant][150] /* ty=Tensor[(1024, 1024), float32] */, 0.0025601f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1086 = transpose(%1085, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1087 = reshape(%1084, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1088 = transpose(%1086, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1089 = qnn.dense(%1087, %1088, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.12236f /* ty=float32 */, 0.0025601f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1090 = reshape(%1089, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1091 = qnn.quantize(meta[relay.Constant][151] /* ty=Tensor[(1024), float32] */, 0.000313254f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1092 = qnn.add(%1090, %1091, 0.000313254f /* ty=float32 */, 0 /* ty=int32 */, 0.000313254f /* ty=float32 */, 0 /* ty=int32 */, 0.000313254f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1093 = reshape(%1092, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1094 = transpose(%1093, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1095 = qnn.requantize(%1094, 0.000313254f /* ty=float32 */, 0 /* ty=int32 */, 0.058194f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1096 = broadcast_to(%1095, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1097 = qnn.quantize(%1083, 0.12236f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1098 = qnn.quantize(meta[relay.Constant][152] /* ty=Tensor[(1024, 1024), float32] */, 0.0025601f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1099 = transpose(%1098, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1100 = reshape(%1097, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1101 = transpose(%1099, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1102 = qnn.dense(%1100, %1101, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.12236f /* ty=float32 */, 0.0025601f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1103 = reshape(%1102, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1104 = qnn.quantize(meta[relay.Constant][153] /* ty=Tensor[(1024), float32] */, 0.000313254f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1105 = qnn.add(%1103, %1104, 0.000313254f /* ty=float32 */, 0 /* ty=int32 */, 0.000313254f /* ty=float32 */, 0 /* ty=int32 */, 0.000313254f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1106 = reshape(%1105, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1107 = transpose(%1106, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %1108 = qnn.requantize(%1107, 0.000313254f /* ty=float32 */, 0 /* ty=int32 */, 0.058194f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %1109 = broadcast_to(%1108, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %1110 = reshape(%1109, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %1111 = reshape(%1096, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1112 = transpose(%1110, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1113 = qnn.batch_matmul(%1111, %1112, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.058194f /* ty=float32 */, 0.058194f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %1114 = reshape(%1113, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %1115 = qnn.dequantize(%1114, 0.00338654f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1116 = divide(%1115, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1117 = add(%1116, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1118 = nn.softmax(%1117, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1119 = qnn.quantize(%1118, 0.00658304f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1120 = broadcast_to(%1119, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1121 = qnn.quantize(%1083, 0.12236f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1122 = qnn.quantize(meta[relay.Constant][154] /* ty=Tensor[(1024, 1024), float32] */, 0.0025601f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1123 = transpose(%1122, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1124 = reshape(%1121, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1125 = transpose(%1123, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1126 = qnn.dense(%1124, %1125, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.12236f /* ty=float32 */, 0.0025601f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1127 = reshape(%1126, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1128 = qnn.quantize(meta[relay.Constant][155] /* ty=Tensor[(1024), float32] */, 0.000313254f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1129 = qnn.add(%1127, %1128, 0.000313254f /* ty=float32 */, 0 /* ty=int32 */, 0.000313254f /* ty=float32 */, 0 /* ty=int32 */, 0.000313254f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1130 = reshape(%1129, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1131 = transpose(%1130, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1132 = qnn.requantize(%1131, 0.000313254f /* ty=float32 */, 0 /* ty=int32 */, 0.058194f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1133 = broadcast_to(%1132, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1134 = reshape(%1133, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1135 = reshape(%1120, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %1136 = transpose(%1134, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %1137 = qnn.batch_matmul(%1135, %1136, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00658304f /* ty=float32 */, 0.058194f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %1138 = reshape(%1137, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1139 = transpose(%1138, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1140 = reshape(%1139, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1141 = qnn.requantize(%1140, 0.000383093f /* ty=float32 */, 0 /* ty=int32 */, 0.0172535f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1142 = qnn.quantize(meta[relay.Constant][156] /* ty=Tensor[(1024, 1024), float32] */, 0.00383745f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1143 = transpose(%1142, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1144 = reshape(%1141, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1145 = transpose(%1143, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1146 = qnn.dense(%1144, %1145, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0172535f /* ty=float32 */, 0.00383745f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1147 = reshape(%1146, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1148 = qnn.quantize(meta[relay.Constant][157] /* ty=Tensor[(1024), float32] */, 6.62093e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1149 = qnn.add(%1147, %1148, 6.62093e-05f /* ty=float32 */, 0 /* ty=int32 */, 6.62093e-05f /* ty=float32 */, 0 /* ty=int32 */, 6.62093e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1150 = qnn.requantize(%1149, 6.62093e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.00794117f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1151 = qnn.quantize(%1083, 0.12236f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1152 = qnn.dequantize(%1150, 0.00794117f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1153 = qnn.dequantize(%1151, 0.12236f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1154 = add(%1152, %1153) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1155 = mean(%1154, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1156 = subtract(%1154, %1155) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1157 = power(%1156, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1158 = mean(%1157, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1159 = add(%1158, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1160 = sqrt(%1159) /* ty=Tensor[(1, 128, 1), float32] */;
  %1161 = divide(%1156, %1160) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1162 = multiply(%1161, meta[relay.Constant][158] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1163 = add(%1162, meta[relay.Constant][159] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1164 = qnn.quantize(%1163, 0.491362f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1165 = qnn.quantize(meta[relay.Constant][160] /* ty=Tensor[(4096, 1024), float32] */, 0.00264932f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %1166 = transpose(%1165, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %1167 = reshape(%1164, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1168 = transpose(%1166, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %1169 = qnn.dense(%1167, %1168, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.491362f /* ty=float32 */, 0.00264932f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %1170 = reshape(%1169, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %1171 = qnn.dequantize(%1170, 0.00130177f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1172 = add(%1171, meta[relay.Constant][161] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1173 = divide(%1172, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1174 = erf(%1173) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1175 = multiply(%1172, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1176 = add(%1174, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1177 = multiply(%1175, %1176) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1178 = qnn.quantize(%1177, 0.0537966f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %1179 = qnn.quantize(meta[relay.Constant][162] /* ty=Tensor[(1024, 4096), float32] */, 0.0216516f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %1180 = transpose(%1179, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %1181 = reshape(%1178, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %1182 = transpose(%1180, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %1183 = qnn.dense(%1181, %1182, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0537966f /* ty=float32 */, 0.0216516f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1184 = reshape(%1183, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1185 = qnn.quantize(meta[relay.Constant][163] /* ty=Tensor[(1024), float32] */, 0.00116478f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1186 = qnn.add(%1184, %1185, 0.00116478f /* ty=float32 */, 0 /* ty=int32 */, 0.00116478f /* ty=float32 */, 0 /* ty=int32 */, 0.00116478f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1187 = qnn.requantize(%1186, 0.00116478f /* ty=float32 */, 0 /* ty=int32 */, 0.0225346f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1188 = qnn.quantize(%1163, 0.491362f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1189 = qnn.dequantize(%1187, 0.0225346f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1190 = qnn.dequantize(%1188, 0.491362f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1191 = add(%1189, %1190) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1192 = mean(%1191, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1193 = subtract(%1191, %1192) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1194 = power(%1193, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1195 = mean(%1194, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1196 = add(%1195, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1197 = sqrt(%1196) /* ty=Tensor[(1, 128, 1), float32] */;
  %1198 = divide(%1193, %1197) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1199 = multiply(%1198, meta[relay.Constant][164] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1200 = add(%1199, meta[relay.Constant][165] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1201 = qnn.quantize(%1200, 0.117269f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1202 = qnn.quantize(meta[relay.Constant][166] /* ty=Tensor[(1024, 1024), float32] */, 0.00231746f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1203 = transpose(%1202, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1204 = reshape(%1201, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1205 = transpose(%1203, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1206 = qnn.dense(%1204, %1205, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.117269f /* ty=float32 */, 0.00231746f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1207 = reshape(%1206, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1208 = qnn.quantize(meta[relay.Constant][167] /* ty=Tensor[(1024), float32] */, 0.000271765f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1209 = qnn.add(%1207, %1208, 0.000271765f /* ty=float32 */, 0 /* ty=int32 */, 0.000271765f /* ty=float32 */, 0 /* ty=int32 */, 0.000271765f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1210 = reshape(%1209, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1211 = transpose(%1210, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1212 = qnn.requantize(%1211, 0.000271765f /* ty=float32 */, 0 /* ty=int32 */, 0.0572474f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1213 = broadcast_to(%1212, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1214 = qnn.quantize(%1200, 0.117269f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1215 = qnn.quantize(meta[relay.Constant][168] /* ty=Tensor[(1024, 1024), float32] */, 0.00231746f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1216 = transpose(%1215, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1217 = reshape(%1214, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1218 = transpose(%1216, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1219 = qnn.dense(%1217, %1218, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.117269f /* ty=float32 */, 0.00231746f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1220 = reshape(%1219, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1221 = qnn.quantize(meta[relay.Constant][169] /* ty=Tensor[(1024), float32] */, 0.000271765f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1222 = qnn.add(%1220, %1221, 0.000271765f /* ty=float32 */, 0 /* ty=int32 */, 0.000271765f /* ty=float32 */, 0 /* ty=int32 */, 0.000271765f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1223 = reshape(%1222, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1224 = transpose(%1223, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %1225 = qnn.requantize(%1224, 0.000271765f /* ty=float32 */, 0 /* ty=int32 */, 0.0572474f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %1226 = broadcast_to(%1225, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %1227 = reshape(%1226, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %1228 = reshape(%1213, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1229 = transpose(%1227, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1230 = qnn.batch_matmul(%1228, %1229, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0572474f /* ty=float32 */, 0.0572474f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %1231 = reshape(%1230, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %1232 = qnn.dequantize(%1231, 0.00327726f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1233 = divide(%1232, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1234 = add(%1233, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1235 = nn.softmax(%1234, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1236 = qnn.quantize(%1235, 0.00761257f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1237 = broadcast_to(%1236, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1238 = qnn.quantize(%1200, 0.117269f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1239 = qnn.quantize(meta[relay.Constant][170] /* ty=Tensor[(1024, 1024), float32] */, 0.00231746f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1240 = transpose(%1239, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1241 = reshape(%1238, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1242 = transpose(%1240, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1243 = qnn.dense(%1241, %1242, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.117269f /* ty=float32 */, 0.00231746f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1244 = reshape(%1243, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1245 = qnn.quantize(meta[relay.Constant][171] /* ty=Tensor[(1024), float32] */, 0.000271765f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1246 = qnn.add(%1244, %1245, 0.000271765f /* ty=float32 */, 0 /* ty=int32 */, 0.000271765f /* ty=float32 */, 0 /* ty=int32 */, 0.000271765f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1247 = reshape(%1246, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1248 = transpose(%1247, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1249 = qnn.requantize(%1248, 0.000271765f /* ty=float32 */, 0 /* ty=int32 */, 0.0572474f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1250 = broadcast_to(%1249, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1251 = reshape(%1250, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1252 = reshape(%1237, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %1253 = transpose(%1251, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %1254 = qnn.batch_matmul(%1252, %1253, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00761257f /* ty=float32 */, 0.0572474f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %1255 = reshape(%1254, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1256 = transpose(%1255, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1257 = reshape(%1256, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1258 = qnn.requantize(%1257, 0.0004358f /* ty=float32 */, 0 /* ty=int32 */, 0.0170885f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1259 = qnn.quantize(meta[relay.Constant][172] /* ty=Tensor[(1024, 1024), float32] */, 0.00318346f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1260 = transpose(%1259, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1261 = reshape(%1258, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1262 = transpose(%1260, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1263 = qnn.dense(%1261, %1262, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0170885f /* ty=float32 */, 0.00318346f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1264 = reshape(%1263, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1265 = qnn.quantize(meta[relay.Constant][173] /* ty=Tensor[(1024), float32] */, 5.44004e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1266 = qnn.add(%1264, %1265, 5.44004e-05f /* ty=float32 */, 0 /* ty=int32 */, 5.44004e-05f /* ty=float32 */, 0 /* ty=int32 */, 5.44004e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1267 = qnn.requantize(%1266, 5.44004e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.00975181f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1268 = qnn.quantize(%1200, 0.117269f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1269 = qnn.dequantize(%1267, 0.00975181f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1270 = qnn.dequantize(%1268, 0.117269f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1271 = add(%1269, %1270) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1272 = mean(%1271, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1273 = subtract(%1271, %1272) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1274 = power(%1273, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1275 = mean(%1274, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1276 = add(%1275, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1277 = sqrt(%1276) /* ty=Tensor[(1, 128, 1), float32] */;
  %1278 = divide(%1273, %1277) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1279 = multiply(%1278, meta[relay.Constant][174] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1280 = add(%1279, meta[relay.Constant][175] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1281 = qnn.quantize(%1280, 0.377333f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1282 = qnn.quantize(meta[relay.Constant][176] /* ty=Tensor[(4096, 1024), float32] */, 0.00357161f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %1283 = transpose(%1282, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %1284 = reshape(%1281, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1285 = transpose(%1283, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %1286 = qnn.dense(%1284, %1285, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.377333f /* ty=float32 */, 0.00357161f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %1287 = reshape(%1286, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %1288 = qnn.dequantize(%1287, 0.00134769f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1289 = add(%1288, meta[relay.Constant][177] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1290 = divide(%1289, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1291 = erf(%1290) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1292 = multiply(%1289, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1293 = add(%1291, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1294 = multiply(%1292, %1293) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1295 = qnn.quantize(%1294, 0.0600529f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %1296 = qnn.quantize(meta[relay.Constant][178] /* ty=Tensor[(1024, 4096), float32] */, 0.0338498f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %1297 = transpose(%1296, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %1298 = reshape(%1295, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %1299 = transpose(%1297, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %1300 = qnn.dense(%1298, %1299, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0600529f /* ty=float32 */, 0.0338498f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1301 = reshape(%1300, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1302 = qnn.quantize(meta[relay.Constant][179] /* ty=Tensor[(1024), float32] */, 0.00203278f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1303 = qnn.add(%1301, %1302, 0.00203278f /* ty=float32 */, 0 /* ty=int32 */, 0.00203278f /* ty=float32 */, 0 /* ty=int32 */, 0.00203278f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1304 = qnn.requantize(%1303, 0.00203278f /* ty=float32 */, 0 /* ty=int32 */, 0.0211071f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1305 = qnn.quantize(%1280, 0.377333f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1306 = qnn.dequantize(%1304, 0.0211071f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1307 = qnn.dequantize(%1305, 0.377333f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1308 = add(%1306, %1307) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1309 = mean(%1308, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1310 = subtract(%1308, %1309) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1311 = power(%1310, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1312 = mean(%1311, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1313 = add(%1312, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1314 = sqrt(%1313) /* ty=Tensor[(1, 128, 1), float32] */;
  %1315 = divide(%1310, %1314) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1316 = multiply(%1315, meta[relay.Constant][180] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1317 = add(%1316, meta[relay.Constant][181] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1318 = qnn.quantize(%1317, 0.134929f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1319 = qnn.quantize(meta[relay.Constant][182] /* ty=Tensor[(1024, 1024), float32] */, 0.00276443f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1320 = transpose(%1319, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1321 = reshape(%1318, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1322 = transpose(%1320, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1323 = qnn.dense(%1321, %1322, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.134929f /* ty=float32 */, 0.00276443f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1324 = reshape(%1323, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1325 = qnn.quantize(meta[relay.Constant][183] /* ty=Tensor[(1024), float32] */, 0.000373003f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1326 = qnn.add(%1324, %1325, 0.000373003f /* ty=float32 */, 0 /* ty=int32 */, 0.000373003f /* ty=float32 */, 0 /* ty=int32 */, 0.000373003f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1327 = reshape(%1326, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1328 = transpose(%1327, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1329 = qnn.requantize(%1328, 0.000373003f /* ty=float32 */, 0 /* ty=int32 */, 0.0514552f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1330 = broadcast_to(%1329, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1331 = qnn.quantize(%1317, 0.134929f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1332 = qnn.quantize(meta[relay.Constant][184] /* ty=Tensor[(1024, 1024), float32] */, 0.00276443f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1333 = transpose(%1332, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1334 = reshape(%1331, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1335 = transpose(%1333, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1336 = qnn.dense(%1334, %1335, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.134929f /* ty=float32 */, 0.00276443f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1337 = reshape(%1336, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1338 = qnn.quantize(meta[relay.Constant][185] /* ty=Tensor[(1024), float32] */, 0.000373003f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1339 = qnn.add(%1337, %1338, 0.000373003f /* ty=float32 */, 0 /* ty=int32 */, 0.000373003f /* ty=float32 */, 0 /* ty=int32 */, 0.000373003f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1340 = reshape(%1339, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1341 = transpose(%1340, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %1342 = qnn.requantize(%1341, 0.000373003f /* ty=float32 */, 0 /* ty=int32 */, 0.0514552f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %1343 = broadcast_to(%1342, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %1344 = reshape(%1343, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %1345 = reshape(%1330, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1346 = transpose(%1344, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1347 = qnn.batch_matmul(%1345, %1346, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0514552f /* ty=float32 */, 0.0514552f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %1348 = reshape(%1347, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %1349 = qnn.dequantize(%1348, 0.00264764f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1350 = divide(%1349, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1351 = add(%1350, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1352 = nn.softmax(%1351, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1353 = qnn.quantize(%1352, 0.00542341f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1354 = broadcast_to(%1353, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1355 = qnn.quantize(%1317, 0.134929f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1356 = qnn.quantize(meta[relay.Constant][186] /* ty=Tensor[(1024, 1024), float32] */, 0.00276443f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1357 = transpose(%1356, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1358 = reshape(%1355, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1359 = transpose(%1357, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1360 = qnn.dense(%1358, %1359, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.134929f /* ty=float32 */, 0.00276443f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1361 = reshape(%1360, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1362 = qnn.quantize(meta[relay.Constant][187] /* ty=Tensor[(1024), float32] */, 0.000373003f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1363 = qnn.add(%1361, %1362, 0.000373003f /* ty=float32 */, 0 /* ty=int32 */, 0.000373003f /* ty=float32 */, 0 /* ty=int32 */, 0.000373003f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1364 = reshape(%1363, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1365 = transpose(%1364, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1366 = qnn.requantize(%1365, 0.000373003f /* ty=float32 */, 0 /* ty=int32 */, 0.0514552f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1367 = broadcast_to(%1366, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1368 = reshape(%1367, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1369 = reshape(%1354, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %1370 = transpose(%1368, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %1371 = qnn.batch_matmul(%1369, %1370, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00542341f /* ty=float32 */, 0.0514552f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %1372 = reshape(%1371, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1373 = transpose(%1372, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1374 = reshape(%1373, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1375 = qnn.requantize(%1374, 0.000279063f /* ty=float32 */, 0 /* ty=int32 */, 0.0169191f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1376 = qnn.quantize(meta[relay.Constant][188] /* ty=Tensor[(1024, 1024), float32] */, 0.00303784f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1377 = transpose(%1376, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1378 = reshape(%1375, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1379 = transpose(%1377, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1380 = qnn.dense(%1378, %1379, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0169191f /* ty=float32 */, 0.00303784f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1381 = reshape(%1380, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1382 = qnn.quantize(meta[relay.Constant][189] /* ty=Tensor[(1024), float32] */, 5.13975e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1383 = qnn.add(%1381, %1382, 5.13975e-05f /* ty=float32 */, 0 /* ty=int32 */, 5.13975e-05f /* ty=float32 */, 0 /* ty=int32 */, 5.13975e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1384 = qnn.requantize(%1383, 5.13975e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0122462f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1385 = qnn.quantize(%1317, 0.134929f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1386 = qnn.dequantize(%1384, 0.0122462f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1387 = qnn.dequantize(%1385, 0.134929f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1388 = add(%1386, %1387) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1389 = mean(%1388, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1390 = subtract(%1388, %1389) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1391 = power(%1390, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1392 = mean(%1391, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1393 = add(%1392, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1394 = sqrt(%1393) /* ty=Tensor[(1, 128, 1), float32] */;
  %1395 = divide(%1390, %1394) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1396 = multiply(%1395, meta[relay.Constant][190] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1397 = add(%1396, meta[relay.Constant][191] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1398 = qnn.quantize(%1397, 0.340672f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1399 = qnn.quantize(meta[relay.Constant][192] /* ty=Tensor[(4096, 1024), float32] */, 0.00427611f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %1400 = transpose(%1399, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %1401 = reshape(%1398, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1402 = transpose(%1400, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %1403 = qnn.dense(%1401, %1402, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.340672f /* ty=float32 */, 0.00427611f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %1404 = reshape(%1403, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %1405 = qnn.dequantize(%1404, 0.00145675f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1406 = add(%1405, meta[relay.Constant][193] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1407 = divide(%1406, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1408 = erf(%1407) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1409 = multiply(%1406, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1410 = add(%1408, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1411 = multiply(%1409, %1410) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1412 = qnn.quantize(%1411, 0.0591675f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %1413 = qnn.quantize(meta[relay.Constant][194] /* ty=Tensor[(1024, 4096), float32] */, 0.0435275f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %1414 = transpose(%1413, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %1415 = reshape(%1412, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %1416 = transpose(%1414, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %1417 = qnn.dense(%1415, %1416, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0591675f /* ty=float32 */, 0.0435275f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1418 = reshape(%1417, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1419 = qnn.quantize(meta[relay.Constant][195] /* ty=Tensor[(1024), float32] */, 0.00257542f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1420 = qnn.add(%1418, %1419, 0.00257542f /* ty=float32 */, 0 /* ty=int32 */, 0.00257542f /* ty=float32 */, 0 /* ty=int32 */, 0.00257542f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1421 = qnn.requantize(%1420, 0.00257542f /* ty=float32 */, 0 /* ty=int32 */, 0.0199728f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1422 = qnn.quantize(%1397, 0.340672f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1423 = qnn.dequantize(%1421, 0.0199728f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1424 = qnn.dequantize(%1422, 0.340672f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1425 = add(%1423, %1424) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1426 = mean(%1425, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1427 = subtract(%1425, %1426) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1428 = power(%1427, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1429 = mean(%1428, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1430 = add(%1429, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1431 = sqrt(%1430) /* ty=Tensor[(1, 128, 1), float32] */;
  %1432 = divide(%1427, %1431) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1433 = multiply(%1432, meta[relay.Constant][196] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1434 = add(%1433, meta[relay.Constant][197] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1435 = qnn.quantize(%1434, 0.124457f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1436 = qnn.quantize(meta[relay.Constant][198] /* ty=Tensor[(1024, 1024), float32] */, 0.00284782f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1437 = transpose(%1436, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1438 = reshape(%1435, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1439 = transpose(%1437, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1440 = qnn.dense(%1438, %1439, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.124457f /* ty=float32 */, 0.00284782f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1441 = reshape(%1440, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1442 = qnn.quantize(meta[relay.Constant][199] /* ty=Tensor[(1024), float32] */, 0.000354431f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1443 = qnn.add(%1441, %1442, 0.000354431f /* ty=float32 */, 0 /* ty=int32 */, 0.000354431f /* ty=float32 */, 0 /* ty=int32 */, 0.000354431f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1444 = reshape(%1443, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1445 = transpose(%1444, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1446 = qnn.requantize(%1445, 0.000354431f /* ty=float32 */, 0 /* ty=int32 */, 0.053694f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1447 = broadcast_to(%1446, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1448 = qnn.quantize(%1434, 0.124457f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1449 = qnn.quantize(meta[relay.Constant][200] /* ty=Tensor[(1024, 1024), float32] */, 0.00284782f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1450 = transpose(%1449, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1451 = reshape(%1448, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1452 = transpose(%1450, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1453 = qnn.dense(%1451, %1452, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.124457f /* ty=float32 */, 0.00284782f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1454 = reshape(%1453, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1455 = qnn.quantize(meta[relay.Constant][201] /* ty=Tensor[(1024), float32] */, 0.000354431f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1456 = qnn.add(%1454, %1455, 0.000354431f /* ty=float32 */, 0 /* ty=int32 */, 0.000354431f /* ty=float32 */, 0 /* ty=int32 */, 0.000354431f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1457 = reshape(%1456, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1458 = transpose(%1457, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %1459 = qnn.requantize(%1458, 0.000354431f /* ty=float32 */, 0 /* ty=int32 */, 0.053694f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %1460 = broadcast_to(%1459, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %1461 = reshape(%1460, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %1462 = reshape(%1447, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1463 = transpose(%1461, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1464 = qnn.batch_matmul(%1462, %1463, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.053694f /* ty=float32 */, 0.053694f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %1465 = reshape(%1464, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %1466 = qnn.dequantize(%1465, 0.00288305f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1467 = divide(%1466, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1468 = add(%1467, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1469 = nn.softmax(%1468, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1470 = qnn.quantize(%1469, 0.00636506f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1471 = broadcast_to(%1470, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1472 = qnn.quantize(%1434, 0.124457f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1473 = qnn.quantize(meta[relay.Constant][202] /* ty=Tensor[(1024, 1024), float32] */, 0.00284782f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1474 = transpose(%1473, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1475 = reshape(%1472, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1476 = transpose(%1474, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1477 = qnn.dense(%1475, %1476, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.124457f /* ty=float32 */, 0.00284782f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1478 = reshape(%1477, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1479 = qnn.quantize(meta[relay.Constant][203] /* ty=Tensor[(1024), float32] */, 0.000354431f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1480 = qnn.add(%1478, %1479, 0.000354431f /* ty=float32 */, 0 /* ty=int32 */, 0.000354431f /* ty=float32 */, 0 /* ty=int32 */, 0.000354431f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1481 = reshape(%1480, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1482 = transpose(%1481, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1483 = qnn.requantize(%1482, 0.000354431f /* ty=float32 */, 0 /* ty=int32 */, 0.053694f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1484 = broadcast_to(%1483, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1485 = reshape(%1484, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1486 = reshape(%1471, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %1487 = transpose(%1485, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %1488 = qnn.batch_matmul(%1486, %1487, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00636506f /* ty=float32 */, 0.053694f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %1489 = reshape(%1488, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1490 = transpose(%1489, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1491 = reshape(%1490, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1492 = qnn.requantize(%1491, 0.000341766f /* ty=float32 */, 0 /* ty=int32 */, 0.0171103f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1493 = qnn.quantize(meta[relay.Constant][204] /* ty=Tensor[(1024, 1024), float32] */, 0.00227709f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1494 = transpose(%1493, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1495 = reshape(%1492, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1496 = transpose(%1494, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1497 = qnn.dense(%1495, %1496, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0171103f /* ty=float32 */, 0.00227709f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1498 = reshape(%1497, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1499 = qnn.quantize(meta[relay.Constant][205] /* ty=Tensor[(1024), float32] */, 3.89616e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1500 = qnn.add(%1498, %1499, 3.89616e-05f /* ty=float32 */, 0 /* ty=int32 */, 3.89616e-05f /* ty=float32 */, 0 /* ty=int32 */, 3.89616e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1501 = qnn.requantize(%1500, 3.89616e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0127137f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1502 = qnn.quantize(%1434, 0.124457f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1503 = qnn.dequantize(%1501, 0.0127137f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1504 = qnn.dequantize(%1502, 0.124457f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1505 = add(%1503, %1504) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1506 = mean(%1505, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1507 = subtract(%1505, %1506) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1508 = power(%1507, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1509 = mean(%1508, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1510 = add(%1509, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1511 = sqrt(%1510) /* ty=Tensor[(1, 128, 1), float32] */;
  %1512 = divide(%1507, %1511) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1513 = multiply(%1512, meta[relay.Constant][206] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1514 = add(%1513, meta[relay.Constant][207] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1515 = qnn.quantize(%1514, 0.295376f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1516 = qnn.quantize(meta[relay.Constant][208] /* ty=Tensor[(4096, 1024), float32] */, 0.00377676f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %1517 = transpose(%1516, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %1518 = reshape(%1515, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1519 = transpose(%1517, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %1520 = qnn.dense(%1518, %1519, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.295376f /* ty=float32 */, 0.00377676f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %1521 = reshape(%1520, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %1522 = qnn.dequantize(%1521, 0.00111556f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1523 = add(%1522, meta[relay.Constant][209] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1524 = divide(%1523, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1525 = erf(%1524) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1526 = multiply(%1523, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1527 = add(%1525, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1528 = multiply(%1526, %1527) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1529 = qnn.quantize(%1528, 0.042897f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %1530 = qnn.quantize(meta[relay.Constant][210] /* ty=Tensor[(1024, 4096), float32] */, 0.0392285f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %1531 = transpose(%1530, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %1532 = reshape(%1529, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %1533 = transpose(%1531, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %1534 = qnn.dense(%1532, %1533, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.042897f /* ty=float32 */, 0.0392285f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1535 = reshape(%1534, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1536 = qnn.quantize(meta[relay.Constant][211] /* ty=Tensor[(1024), float32] */, 0.00168278f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1537 = qnn.add(%1535, %1536, 0.00168278f /* ty=float32 */, 0 /* ty=int32 */, 0.00168278f /* ty=float32 */, 0 /* ty=int32 */, 0.00168278f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1538 = qnn.requantize(%1537, 0.00168278f /* ty=float32 */, 0 /* ty=int32 */, 0.0194794f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1539 = qnn.quantize(%1514, 0.295376f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1540 = qnn.dequantize(%1538, 0.0194794f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1541 = qnn.dequantize(%1539, 0.295376f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1542 = add(%1540, %1541) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1543 = mean(%1542, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1544 = subtract(%1542, %1543) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1545 = power(%1544, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1546 = mean(%1545, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1547 = add(%1546, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1548 = sqrt(%1547) /* ty=Tensor[(1, 128, 1), float32] */;
  %1549 = divide(%1544, %1548) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1550 = multiply(%1549, meta[relay.Constant][212] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1551 = add(%1550, meta[relay.Constant][213] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1552 = qnn.quantize(%1551, 0.111063f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1553 = qnn.quantize(meta[relay.Constant][214] /* ty=Tensor[(1024, 1024), float32] */, 0.0024961f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1554 = transpose(%1553, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1555 = reshape(%1552, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1556 = transpose(%1554, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1557 = qnn.dense(%1555, %1556, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.111063f /* ty=float32 */, 0.0024961f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1558 = reshape(%1557, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1559 = qnn.quantize(meta[relay.Constant][215] /* ty=Tensor[(1024), float32] */, 0.000277223f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1560 = qnn.add(%1558, %1559, 0.000277223f /* ty=float32 */, 0 /* ty=int32 */, 0.000277223f /* ty=float32 */, 0 /* ty=int32 */, 0.000277223f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1561 = reshape(%1560, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1562 = transpose(%1561, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1563 = qnn.requantize(%1562, 0.000277223f /* ty=float32 */, 0 /* ty=int32 */, 0.0504956f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1564 = broadcast_to(%1563, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1565 = qnn.quantize(%1551, 0.111063f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1566 = qnn.quantize(meta[relay.Constant][216] /* ty=Tensor[(1024, 1024), float32] */, 0.0024961f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1567 = transpose(%1566, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1568 = reshape(%1565, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1569 = transpose(%1567, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1570 = qnn.dense(%1568, %1569, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.111063f /* ty=float32 */, 0.0024961f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1571 = reshape(%1570, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1572 = qnn.quantize(meta[relay.Constant][217] /* ty=Tensor[(1024), float32] */, 0.000277223f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1573 = qnn.add(%1571, %1572, 0.000277223f /* ty=float32 */, 0 /* ty=int32 */, 0.000277223f /* ty=float32 */, 0 /* ty=int32 */, 0.000277223f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1574 = reshape(%1573, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1575 = transpose(%1574, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %1576 = qnn.requantize(%1575, 0.000277223f /* ty=float32 */, 0 /* ty=int32 */, 0.0504956f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %1577 = broadcast_to(%1576, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %1578 = reshape(%1577, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %1579 = reshape(%1564, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1580 = transpose(%1578, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1581 = qnn.batch_matmul(%1579, %1580, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0504956f /* ty=float32 */, 0.0504956f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %1582 = reshape(%1581, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %1583 = qnn.dequantize(%1582, 0.0025498f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1584 = divide(%1583, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1585 = add(%1584, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1586 = nn.softmax(%1585, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1587 = qnn.quantize(%1586, 0.00547221f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1588 = broadcast_to(%1587, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1589 = qnn.quantize(%1551, 0.111063f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1590 = qnn.quantize(meta[relay.Constant][218] /* ty=Tensor[(1024, 1024), float32] */, 0.0024961f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1591 = transpose(%1590, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1592 = reshape(%1589, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1593 = transpose(%1591, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1594 = qnn.dense(%1592, %1593, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.111063f /* ty=float32 */, 0.0024961f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1595 = reshape(%1594, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1596 = qnn.quantize(meta[relay.Constant][219] /* ty=Tensor[(1024), float32] */, 0.000277223f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1597 = qnn.add(%1595, %1596, 0.000277223f /* ty=float32 */, 0 /* ty=int32 */, 0.000277223f /* ty=float32 */, 0 /* ty=int32 */, 0.000277223f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1598 = reshape(%1597, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1599 = transpose(%1598, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1600 = qnn.requantize(%1599, 0.000277223f /* ty=float32 */, 0 /* ty=int32 */, 0.0504956f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1601 = broadcast_to(%1600, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1602 = reshape(%1601, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1603 = reshape(%1588, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %1604 = transpose(%1602, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %1605 = qnn.batch_matmul(%1603, %1604, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00547221f /* ty=float32 */, 0.0504956f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %1606 = reshape(%1605, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1607 = transpose(%1606, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1608 = reshape(%1607, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1609 = qnn.requantize(%1608, 0.000276323f /* ty=float32 */, 0 /* ty=int32 */, 0.0163596f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1610 = qnn.quantize(meta[relay.Constant][220] /* ty=Tensor[(1024, 1024), float32] */, 0.00218478f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1611 = transpose(%1610, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1612 = reshape(%1609, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1613 = transpose(%1611, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1614 = qnn.dense(%1612, %1613, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0163596f /* ty=float32 */, 0.00218478f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1615 = reshape(%1614, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1616 = qnn.quantize(meta[relay.Constant][221] /* ty=Tensor[(1024), float32] */, 3.57421e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1617 = qnn.add(%1615, %1616, 3.57421e-05f /* ty=float32 */, 0 /* ty=int32 */, 3.57421e-05f /* ty=float32 */, 0 /* ty=int32 */, 3.57421e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1618 = qnn.requantize(%1617, 3.57421e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0139052f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1619 = qnn.quantize(%1551, 0.111063f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1620 = qnn.dequantize(%1618, 0.0139052f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1621 = qnn.dequantize(%1619, 0.111063f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1622 = add(%1620, %1621) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1623 = mean(%1622, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1624 = subtract(%1622, %1623) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1625 = power(%1624, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1626 = mean(%1625, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1627 = add(%1626, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1628 = sqrt(%1627) /* ty=Tensor[(1, 128, 1), float32] */;
  %1629 = divide(%1624, %1628) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1630 = multiply(%1629, meta[relay.Constant][222] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1631 = add(%1630, meta[relay.Constant][223] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1632 = qnn.quantize(%1631, 0.242777f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1633 = qnn.quantize(meta[relay.Constant][224] /* ty=Tensor[(4096, 1024), float32] */, 0.00242385f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %1634 = transpose(%1633, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %1635 = reshape(%1632, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1636 = transpose(%1634, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %1637 = qnn.dense(%1635, %1636, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.242777f /* ty=float32 */, 0.00242385f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %1638 = reshape(%1637, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %1639 = qnn.dequantize(%1638, 0.000588455f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1640 = add(%1639, meta[relay.Constant][225] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1641 = divide(%1640, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1642 = erf(%1641) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1643 = multiply(%1640, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1644 = add(%1642, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1645 = multiply(%1643, %1644) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1646 = qnn.quantize(%1645, 0.0421221f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %1647 = qnn.quantize(meta[relay.Constant][226] /* ty=Tensor[(1024, 4096), float32] */, 0.0363874f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %1648 = transpose(%1647, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %1649 = reshape(%1646, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %1650 = transpose(%1648, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %1651 = qnn.dense(%1649, %1650, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0421221f /* ty=float32 */, 0.0363874f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1652 = reshape(%1651, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1653 = qnn.quantize(meta[relay.Constant][227] /* ty=Tensor[(1024), float32] */, 0.00153271f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1654 = qnn.add(%1652, %1653, 0.00153271f /* ty=float32 */, 0 /* ty=int32 */, 0.00153271f /* ty=float32 */, 0 /* ty=int32 */, 0.00153271f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1655 = qnn.requantize(%1654, 0.00153271f /* ty=float32 */, 0 /* ty=int32 */, 0.0201865f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1656 = qnn.quantize(%1631, 0.242777f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1657 = qnn.dequantize(%1655, 0.0201865f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1658 = qnn.dequantize(%1656, 0.242777f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1659 = add(%1657, %1658) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1660 = mean(%1659, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1661 = subtract(%1659, %1660) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1662 = power(%1661, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1663 = mean(%1662, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1664 = add(%1663, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1665 = sqrt(%1664) /* ty=Tensor[(1, 128, 1), float32] */;
  %1666 = divide(%1661, %1665) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1667 = multiply(%1666, meta[relay.Constant][228] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1668 = add(%1667, meta[relay.Constant][229] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1669 = qnn.quantize(%1668, 0.0827522f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1670 = qnn.quantize(meta[relay.Constant][230] /* ty=Tensor[(1024, 1024), float32] */, 0.00293742f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1671 = transpose(%1670, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1672 = reshape(%1669, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1673 = transpose(%1671, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1674 = qnn.dense(%1672, %1673, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0827522f /* ty=float32 */, 0.00293742f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1675 = reshape(%1674, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1676 = qnn.quantize(meta[relay.Constant][231] /* ty=Tensor[(1024), float32] */, 0.000243078f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1677 = qnn.add(%1675, %1676, 0.000243078f /* ty=float32 */, 0 /* ty=int32 */, 0.000243078f /* ty=float32 */, 0 /* ty=int32 */, 0.000243078f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1678 = reshape(%1677, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1679 = transpose(%1678, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1680 = qnn.requantize(%1679, 0.000243078f /* ty=float32 */, 0 /* ty=int32 */, 0.0517519f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1681 = broadcast_to(%1680, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1682 = qnn.quantize(%1668, 0.0827522f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1683 = qnn.quantize(meta[relay.Constant][232] /* ty=Tensor[(1024, 1024), float32] */, 0.00293742f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1684 = transpose(%1683, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1685 = reshape(%1682, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1686 = transpose(%1684, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1687 = qnn.dense(%1685, %1686, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0827522f /* ty=float32 */, 0.00293742f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1688 = reshape(%1687, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1689 = qnn.quantize(meta[relay.Constant][233] /* ty=Tensor[(1024), float32] */, 0.000243078f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1690 = qnn.add(%1688, %1689, 0.000243078f /* ty=float32 */, 0 /* ty=int32 */, 0.000243078f /* ty=float32 */, 0 /* ty=int32 */, 0.000243078f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1691 = reshape(%1690, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1692 = transpose(%1691, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %1693 = qnn.requantize(%1692, 0.000243078f /* ty=float32 */, 0 /* ty=int32 */, 0.0517519f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %1694 = broadcast_to(%1693, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %1695 = reshape(%1694, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %1696 = reshape(%1681, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1697 = transpose(%1695, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1698 = qnn.batch_matmul(%1696, %1697, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0517519f /* ty=float32 */, 0.0517519f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %1699 = reshape(%1698, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %1700 = qnn.dequantize(%1699, 0.00267826f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1701 = divide(%1700, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1702 = add(%1701, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1703 = nn.softmax(%1702, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1704 = qnn.quantize(%1703, 0.00551432f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1705 = broadcast_to(%1704, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1706 = qnn.quantize(%1668, 0.0827522f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1707 = qnn.quantize(meta[relay.Constant][234] /* ty=Tensor[(1024, 1024), float32] */, 0.00293742f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1708 = transpose(%1707, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1709 = reshape(%1706, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1710 = transpose(%1708, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1711 = qnn.dense(%1709, %1710, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0827522f /* ty=float32 */, 0.00293742f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1712 = reshape(%1711, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1713 = qnn.quantize(meta[relay.Constant][235] /* ty=Tensor[(1024), float32] */, 0.000243078f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1714 = qnn.add(%1712, %1713, 0.000243078f /* ty=float32 */, 0 /* ty=int32 */, 0.000243078f /* ty=float32 */, 0 /* ty=int32 */, 0.000243078f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1715 = reshape(%1714, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1716 = transpose(%1715, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1717 = qnn.requantize(%1716, 0.000243078f /* ty=float32 */, 0 /* ty=int32 */, 0.0517519f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1718 = broadcast_to(%1717, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1719 = reshape(%1718, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1720 = reshape(%1705, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %1721 = transpose(%1719, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %1722 = qnn.batch_matmul(%1720, %1721, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00551432f /* ty=float32 */, 0.0517519f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %1723 = reshape(%1722, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1724 = transpose(%1723, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1725 = reshape(%1724, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1726 = qnn.requantize(%1725, 0.000285376f /* ty=float32 */, 0 /* ty=int32 */, 0.0199012f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1727 = qnn.quantize(meta[relay.Constant][236] /* ty=Tensor[(1024, 1024), float32] */, 0.0021396f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1728 = transpose(%1727, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1729 = reshape(%1726, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1730 = transpose(%1728, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1731 = qnn.dense(%1729, %1730, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0199012f /* ty=float32 */, 0.0021396f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1732 = reshape(%1731, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1733 = qnn.quantize(meta[relay.Constant][237] /* ty=Tensor[(1024), float32] */, 4.25806e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1734 = qnn.add(%1732, %1733, 4.25806e-05f /* ty=float32 */, 0 /* ty=int32 */, 4.25806e-05f /* ty=float32 */, 0 /* ty=int32 */, 4.25806e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1735 = qnn.requantize(%1734, 4.25806e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.012297f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1736 = qnn.quantize(%1668, 0.0827522f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1737 = qnn.dequantize(%1735, 0.012297f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1738 = qnn.dequantize(%1736, 0.0827522f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1739 = add(%1737, %1738) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1740 = mean(%1739, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1741 = subtract(%1739, %1740) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1742 = power(%1741, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1743 = mean(%1742, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1744 = add(%1743, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1745 = sqrt(%1744) /* ty=Tensor[(1, 128, 1), float32] */;
  %1746 = divide(%1741, %1745) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1747 = multiply(%1746, meta[relay.Constant][238] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1748 = add(%1747, meta[relay.Constant][239] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1749 = qnn.quantize(%1748, 0.1643f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1750 = qnn.quantize(meta[relay.Constant][240] /* ty=Tensor[(4096, 1024), float32] */, 0.00189252f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %1751 = transpose(%1750, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %1752 = reshape(%1749, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1753 = transpose(%1751, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %1754 = qnn.dense(%1752, %1753, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.1643f /* ty=float32 */, 0.00189252f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %1755 = reshape(%1754, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %1756 = qnn.dequantize(%1755, 0.000310941f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1757 = add(%1756, meta[relay.Constant][241] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1758 = divide(%1757, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1759 = erf(%1758) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1760 = multiply(%1757, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1761 = add(%1759, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1762 = multiply(%1760, %1761) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1763 = qnn.quantize(%1762, 0.0337782f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %1764 = qnn.quantize(meta[relay.Constant][242] /* ty=Tensor[(1024, 4096), float32] */, 0.0248426f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %1765 = transpose(%1764, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %1766 = reshape(%1763, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %1767 = transpose(%1765, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %1768 = qnn.dense(%1766, %1767, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0337782f /* ty=float32 */, 0.0248426f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1769 = reshape(%1768, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1770 = qnn.quantize(meta[relay.Constant][243] /* ty=Tensor[(1024), float32] */, 0.000839138f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1771 = qnn.add(%1769, %1770, 0.000839138f /* ty=float32 */, 0 /* ty=int32 */, 0.000839138f /* ty=float32 */, 0 /* ty=int32 */, 0.000839138f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1772 = qnn.requantize(%1771, 0.000839138f /* ty=float32 */, 0 /* ty=int32 */, 0.047057f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1773 = qnn.quantize(%1748, 0.1643f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1774 = qnn.dequantize(%1772, 0.047057f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1775 = qnn.dequantize(%1773, 0.1643f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1776 = add(%1774, %1775) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1777 = mean(%1776, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1778 = subtract(%1776, %1777) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1779 = power(%1778, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1780 = mean(%1779, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1781 = add(%1780, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1782 = sqrt(%1781) /* ty=Tensor[(1, 128, 1), float32] */;
  %1783 = divide(%1778, %1782) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1784 = multiply(%1783, meta[relay.Constant][244] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1785 = add(%1784, meta[relay.Constant][245] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1786 = qnn.quantize(%1785, 0.0805703f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1787 = qnn.quantize(meta[relay.Constant][246] /* ty=Tensor[(1024, 1024), float32] */, 0.00278236f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1788 = transpose(%1787, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1789 = reshape(%1786, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1790 = transpose(%1788, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1791 = qnn.dense(%1789, %1790, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0805703f /* ty=float32 */, 0.00278236f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1792 = reshape(%1791, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1793 = qnn.quantize(meta[relay.Constant][247] /* ty=Tensor[(1024), float32] */, 0.000224176f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1794 = qnn.add(%1792, %1793, 0.000224176f /* ty=float32 */, 0 /* ty=int32 */, 0.000224176f /* ty=float32 */, 0 /* ty=int32 */, 0.000224176f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1795 = reshape(%1794, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1796 = transpose(%1795, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1797 = qnn.requantize(%1796, 0.000224176f /* ty=float32 */, 0 /* ty=int32 */, 0.0466233f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1798 = broadcast_to(%1797, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1799 = qnn.quantize(%1785, 0.0805703f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1800 = qnn.quantize(meta[relay.Constant][248] /* ty=Tensor[(1024, 1024), float32] */, 0.00278236f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1801 = transpose(%1800, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1802 = reshape(%1799, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1803 = transpose(%1801, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1804 = qnn.dense(%1802, %1803, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0805703f /* ty=float32 */, 0.00278236f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1805 = reshape(%1804, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1806 = qnn.quantize(meta[relay.Constant][249] /* ty=Tensor[(1024), float32] */, 0.000224176f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1807 = qnn.add(%1805, %1806, 0.000224176f /* ty=float32 */, 0 /* ty=int32 */, 0.000224176f /* ty=float32 */, 0 /* ty=int32 */, 0.000224176f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1808 = reshape(%1807, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1809 = transpose(%1808, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %1810 = qnn.requantize(%1809, 0.000224176f /* ty=float32 */, 0 /* ty=int32 */, 0.0466233f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %1811 = broadcast_to(%1810, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %1812 = reshape(%1811, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %1813 = reshape(%1798, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1814 = transpose(%1812, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1815 = qnn.batch_matmul(%1813, %1814, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0466233f /* ty=float32 */, 0.0466233f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %1816 = reshape(%1815, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %1817 = qnn.dequantize(%1816, 0.00217373f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1818 = divide(%1817, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1819 = add(%1818, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1820 = nn.softmax(%1819, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1821 = qnn.quantize(%1820, 0.00499753f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1822 = broadcast_to(%1821, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1823 = qnn.quantize(%1785, 0.0805703f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1824 = qnn.quantize(meta[relay.Constant][250] /* ty=Tensor[(1024, 1024), float32] */, 0.00278236f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1825 = transpose(%1824, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1826 = reshape(%1823, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1827 = transpose(%1825, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1828 = qnn.dense(%1826, %1827, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0805703f /* ty=float32 */, 0.00278236f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1829 = reshape(%1828, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1830 = qnn.quantize(meta[relay.Constant][251] /* ty=Tensor[(1024), float32] */, 0.000224176f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1831 = qnn.add(%1829, %1830, 0.000224176f /* ty=float32 */, 0 /* ty=int32 */, 0.000224176f /* ty=float32 */, 0 /* ty=int32 */, 0.000224176f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1832 = reshape(%1831, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1833 = transpose(%1832, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1834 = qnn.requantize(%1833, 0.000224176f /* ty=float32 */, 0 /* ty=int32 */, 0.0466233f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1835 = broadcast_to(%1834, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1836 = reshape(%1835, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1837 = reshape(%1822, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %1838 = transpose(%1836, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %1839 = qnn.batch_matmul(%1837, %1838, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00499753f /* ty=float32 */, 0.0466233f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %1840 = reshape(%1839, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1841 = transpose(%1840, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1842 = reshape(%1841, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1843 = qnn.requantize(%1842, 0.000233001f /* ty=float32 */, 0 /* ty=int32 */, 0.0168853f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1844 = qnn.quantize(meta[relay.Constant][252] /* ty=Tensor[(1024, 1024), float32] */, 0.00422453f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1845 = transpose(%1844, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1846 = reshape(%1843, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1847 = transpose(%1845, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1848 = qnn.dense(%1846, %1847, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0168853f /* ty=float32 */, 0.00422453f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1849 = reshape(%1848, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1850 = qnn.quantize(meta[relay.Constant][253] /* ty=Tensor[(1024), float32] */, 7.13325e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1851 = qnn.add(%1849, %1850, 7.13325e-05f /* ty=float32 */, 0 /* ty=int32 */, 7.13325e-05f /* ty=float32 */, 0 /* ty=int32 */, 7.13325e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1852 = qnn.requantize(%1851, 7.13325e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0115148f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1853 = qnn.quantize(%1785, 0.0805703f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1854 = qnn.dequantize(%1852, 0.0115148f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1855 = qnn.dequantize(%1853, 0.0805703f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1856 = add(%1854, %1855) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1857 = mean(%1856, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1858 = subtract(%1856, %1857) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1859 = power(%1858, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1860 = mean(%1859, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1861 = add(%1860, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1862 = sqrt(%1861) /* ty=Tensor[(1, 128, 1), float32] */;
  %1863 = divide(%1858, %1862) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1864 = multiply(%1863, meta[relay.Constant][254] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1865 = add(%1864, meta[relay.Constant][255] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1866 = qnn.quantize(%1865, 0.264988f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1867 = qnn.quantize(meta[relay.Constant][256] /* ty=Tensor[(4096, 1024), float32] */, 0.0018431f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %1868 = transpose(%1867, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %1869 = reshape(%1866, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1870 = transpose(%1868, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %1871 = qnn.dense(%1869, %1870, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.264988f /* ty=float32 */, 0.0018431f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %1872 = reshape(%1871, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %1873 = qnn.dequantize(%1872, 0.000488399f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1874 = add(%1873, meta[relay.Constant][257] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1875 = divide(%1874, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1876 = erf(%1875) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1877 = multiply(%1874, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1878 = add(%1876, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1879 = multiply(%1877, %1878) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1880 = qnn.quantize(%1879, 0.0387802f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %1881 = qnn.quantize(meta[relay.Constant][258] /* ty=Tensor[(1024, 4096), float32] */, 0.0208871f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %1882 = transpose(%1881, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %1883 = reshape(%1880, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %1884 = transpose(%1882, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %1885 = qnn.dense(%1883, %1884, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0387802f /* ty=float32 */, 0.0208871f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1886 = reshape(%1885, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1887 = qnn.quantize(meta[relay.Constant][259] /* ty=Tensor[(1024), float32] */, 0.000810004f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1888 = qnn.add(%1886, %1887, 0.000810004f /* ty=float32 */, 0 /* ty=int32 */, 0.000810004f /* ty=float32 */, 0 /* ty=int32 */, 0.000810004f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1889 = qnn.requantize(%1888, 0.000810004f /* ty=float32 */, 0 /* ty=int32 */, 0.031269f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1890 = qnn.quantize(%1865, 0.264988f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1891 = qnn.dequantize(%1889, 0.031269f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1892 = qnn.dequantize(%1890, 0.264988f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1893 = add(%1891, %1892) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1894 = mean(%1893, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1895 = subtract(%1893, %1894) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1896 = power(%1895, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1897 = mean(%1896, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1898 = add(%1897, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1899 = sqrt(%1898) /* ty=Tensor[(1, 128, 1), float32] */;
  %1900 = divide(%1895, %1899) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1901 = multiply(%1900, meta[relay.Constant][260] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1902 = add(%1901, meta[relay.Constant][261] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1903 = qnn.quantize(%1902, 0.0922307f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1904 = qnn.quantize(meta[relay.Constant][262] /* ty=Tensor[(1024, 1024), float32] */, 0.00254594f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1905 = transpose(%1904, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1906 = reshape(%1903, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1907 = transpose(%1905, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1908 = qnn.dense(%1906, %1907, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0922307f /* ty=float32 */, 0.00254594f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1909 = reshape(%1908, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1910 = qnn.quantize(meta[relay.Constant][263] /* ty=Tensor[(1024), float32] */, 0.000234813f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1911 = qnn.add(%1909, %1910, 0.000234813f /* ty=float32 */, 0 /* ty=int32 */, 0.000234813f /* ty=float32 */, 0 /* ty=int32 */, 0.000234813f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1912 = reshape(%1911, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1913 = transpose(%1912, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1914 = qnn.requantize(%1913, 0.000234813f /* ty=float32 */, 0 /* ty=int32 */, 0.0453802f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1915 = broadcast_to(%1914, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1916 = qnn.quantize(%1902, 0.0922307f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1917 = qnn.quantize(meta[relay.Constant][264] /* ty=Tensor[(1024, 1024), float32] */, 0.00254594f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1918 = transpose(%1917, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1919 = reshape(%1916, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1920 = transpose(%1918, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1921 = qnn.dense(%1919, %1920, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0922307f /* ty=float32 */, 0.00254594f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1922 = reshape(%1921, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1923 = qnn.quantize(meta[relay.Constant][265] /* ty=Tensor[(1024), float32] */, 0.000234813f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1924 = qnn.add(%1922, %1923, 0.000234813f /* ty=float32 */, 0 /* ty=int32 */, 0.000234813f /* ty=float32 */, 0 /* ty=int32 */, 0.000234813f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1925 = reshape(%1924, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1926 = transpose(%1925, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %1927 = qnn.requantize(%1926, 0.000234813f /* ty=float32 */, 0 /* ty=int32 */, 0.0453802f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %1928 = broadcast_to(%1927, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %1929 = reshape(%1928, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %1930 = reshape(%1915, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1931 = transpose(%1929, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1932 = qnn.batch_matmul(%1930, %1931, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0453802f /* ty=float32 */, 0.0453802f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %1933 = reshape(%1932, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %1934 = qnn.dequantize(%1933, 0.00205937f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1935 = divide(%1934, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1936 = add(%1935, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1937 = nn.softmax(%1936, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %1938 = qnn.quantize(%1937, 0.00524315f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1939 = broadcast_to(%1938, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %1940 = qnn.quantize(%1902, 0.0922307f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1941 = qnn.quantize(meta[relay.Constant][266] /* ty=Tensor[(1024, 1024), float32] */, 0.00254594f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1942 = transpose(%1941, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1943 = reshape(%1940, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1944 = transpose(%1942, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1945 = qnn.dense(%1943, %1944, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0922307f /* ty=float32 */, 0.00254594f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1946 = reshape(%1945, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1947 = qnn.quantize(meta[relay.Constant][267] /* ty=Tensor[(1024), float32] */, 0.000234813f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1948 = qnn.add(%1946, %1947, 0.000234813f /* ty=float32 */, 0 /* ty=int32 */, 0.000234813f /* ty=float32 */, 0 /* ty=int32 */, 0.000234813f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1949 = reshape(%1948, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1950 = transpose(%1949, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1951 = qnn.requantize(%1950, 0.000234813f /* ty=float32 */, 0 /* ty=int32 */, 0.0453802f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1952 = broadcast_to(%1951, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %1953 = reshape(%1952, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %1954 = reshape(%1939, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %1955 = transpose(%1953, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %1956 = qnn.batch_matmul(%1954, %1955, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00524315f /* ty=float32 */, 0.0453802f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %1957 = reshape(%1956, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %1958 = transpose(%1957, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %1959 = reshape(%1958, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1960 = qnn.requantize(%1959, 0.000237935f /* ty=float32 */, 0 /* ty=int32 */, 0.0151515f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1961 = qnn.quantize(meta[relay.Constant][268] /* ty=Tensor[(1024, 1024), float32] */, 0.00273488f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %1962 = transpose(%1961, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %1963 = reshape(%1960, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1964 = transpose(%1962, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %1965 = qnn.dense(%1963, %1964, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0151515f /* ty=float32 */, 0.00273488f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %1966 = reshape(%1965, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1967 = qnn.quantize(meta[relay.Constant][269] /* ty=Tensor[(1024), float32] */, 4.14375e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %1968 = qnn.add(%1966, %1967, 4.14375e-05f /* ty=float32 */, 0 /* ty=int32 */, 4.14375e-05f /* ty=float32 */, 0 /* ty=int32 */, 4.14375e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %1969 = qnn.requantize(%1968, 4.14375e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0108927f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %1970 = qnn.quantize(%1902, 0.0922307f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1971 = qnn.dequantize(%1969, 0.0108927f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1972 = qnn.dequantize(%1970, 0.0922307f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1973 = add(%1971, %1972) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1974 = mean(%1973, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1975 = subtract(%1973, %1974) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1976 = power(%1975, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1977 = mean(%1976, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %1978 = add(%1977, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %1979 = sqrt(%1978) /* ty=Tensor[(1, 128, 1), float32] */;
  %1980 = divide(%1975, %1979) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1981 = multiply(%1980, meta[relay.Constant][270] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1982 = add(%1981, meta[relay.Constant][271] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %1983 = qnn.quantize(%1982, 0.306251f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %1984 = qnn.quantize(meta[relay.Constant][272] /* ty=Tensor[(4096, 1024), float32] */, 0.00180535f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %1985 = transpose(%1984, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %1986 = reshape(%1983, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %1987 = transpose(%1985, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %1988 = qnn.dense(%1986, %1987, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.306251f /* ty=float32 */, 0.00180535f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %1989 = reshape(%1988, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %1990 = qnn.dequantize(%1989, 0.000552891f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1991 = add(%1990, meta[relay.Constant][273] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1992 = divide(%1991, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1993 = erf(%1992) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1994 = multiply(%1991, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1995 = add(%1993, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1996 = multiply(%1994, %1995) /* ty=Tensor[(1, 128, 4096), float32] */;
  %1997 = qnn.quantize(%1996, 0.047786f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %1998 = qnn.quantize(meta[relay.Constant][274] /* ty=Tensor[(1024, 4096), float32] */, 0.00989066f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %1999 = transpose(%1998, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %2000 = reshape(%1997, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %2001 = transpose(%1999, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %2002 = qnn.dense(%2000, %2001, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.047786f /* ty=float32 */, 0.00989066f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2003 = reshape(%2002, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2004 = qnn.quantize(meta[relay.Constant][275] /* ty=Tensor[(1024), float32] */, 0.000472635f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2005 = qnn.add(%2003, %2004, 0.000472635f /* ty=float32 */, 0 /* ty=int32 */, 0.000472635f /* ty=float32 */, 0 /* ty=int32 */, 0.000472635f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2006 = qnn.requantize(%2005, 0.000472635f /* ty=float32 */, 0 /* ty=int32 */, 0.0250569f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2007 = qnn.quantize(%1982, 0.306251f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2008 = qnn.dequantize(%2006, 0.0250569f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2009 = qnn.dequantize(%2007, 0.306251f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2010 = add(%2008, %2009) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2011 = mean(%2010, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2012 = subtract(%2010, %2011) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2013 = power(%2012, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2014 = mean(%2013, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2015 = add(%2014, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %2016 = sqrt(%2015) /* ty=Tensor[(1, 128, 1), float32] */;
  %2017 = divide(%2012, %2016) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2018 = multiply(%2017, meta[relay.Constant][276] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2019 = add(%2018, meta[relay.Constant][277] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2020 = qnn.quantize(%2019, 0.084264f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2021 = qnn.quantize(meta[relay.Constant][278] /* ty=Tensor[(1024, 1024), float32] */, 0.00279138f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2022 = transpose(%2021, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2023 = reshape(%2020, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2024 = transpose(%2022, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2025 = qnn.dense(%2023, %2024, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.084264f /* ty=float32 */, 0.00279138f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2026 = reshape(%2025, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2027 = qnn.quantize(meta[relay.Constant][279] /* ty=Tensor[(1024), float32] */, 0.000235213f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2028 = qnn.add(%2026, %2027, 0.000235213f /* ty=float32 */, 0 /* ty=int32 */, 0.000235213f /* ty=float32 */, 0 /* ty=int32 */, 0.000235213f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2029 = reshape(%2028, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2030 = transpose(%2029, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2031 = qnn.requantize(%2030, 0.000235213f /* ty=float32 */, 0 /* ty=int32 */, 0.0444434f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2032 = broadcast_to(%2031, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2033 = qnn.quantize(%2019, 0.084264f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2034 = qnn.quantize(meta[relay.Constant][280] /* ty=Tensor[(1024, 1024), float32] */, 0.00279138f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2035 = transpose(%2034, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2036 = reshape(%2033, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2037 = transpose(%2035, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2038 = qnn.dense(%2036, %2037, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.084264f /* ty=float32 */, 0.00279138f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2039 = reshape(%2038, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2040 = qnn.quantize(meta[relay.Constant][281] /* ty=Tensor[(1024), float32] */, 0.000235213f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2041 = qnn.add(%2039, %2040, 0.000235213f /* ty=float32 */, 0 /* ty=int32 */, 0.000235213f /* ty=float32 */, 0 /* ty=int32 */, 0.000235213f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2042 = reshape(%2041, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2043 = transpose(%2042, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %2044 = qnn.requantize(%2043, 0.000235213f /* ty=float32 */, 0 /* ty=int32 */, 0.0444434f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %2045 = broadcast_to(%2044, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %2046 = reshape(%2045, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %2047 = reshape(%2032, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2048 = transpose(%2046, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2049 = qnn.batch_matmul(%2047, %2048, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0444434f /* ty=float32 */, 0.0444434f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %2050 = reshape(%2049, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %2051 = qnn.dequantize(%2050, 0.00197522f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2052 = divide(%2051, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2053 = add(%2052, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2054 = nn.softmax(%2053, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2055 = qnn.quantize(%2054, 0.00574399f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %2056 = broadcast_to(%2055, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %2057 = qnn.quantize(%2019, 0.084264f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2058 = qnn.quantize(meta[relay.Constant][282] /* ty=Tensor[(1024, 1024), float32] */, 0.00279138f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2059 = transpose(%2058, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2060 = reshape(%2057, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2061 = transpose(%2059, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2062 = qnn.dense(%2060, %2061, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.084264f /* ty=float32 */, 0.00279138f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2063 = reshape(%2062, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2064 = qnn.quantize(meta[relay.Constant][283] /* ty=Tensor[(1024), float32] */, 0.000235213f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2065 = qnn.add(%2063, %2064, 0.000235213f /* ty=float32 */, 0 /* ty=int32 */, 0.000235213f /* ty=float32 */, 0 /* ty=int32 */, 0.000235213f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2066 = reshape(%2065, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2067 = transpose(%2066, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2068 = qnn.requantize(%2067, 0.000235213f /* ty=float32 */, 0 /* ty=int32 */, 0.0444434f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2069 = broadcast_to(%2068, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2070 = reshape(%2069, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2071 = reshape(%2056, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %2072 = transpose(%2070, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %2073 = qnn.batch_matmul(%2071, %2072, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00574399f /* ty=float32 */, 0.0444434f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %2074 = reshape(%2073, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2075 = transpose(%2074, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2076 = reshape(%2075, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2077 = qnn.requantize(%2076, 0.000255283f /* ty=float32 */, 0 /* ty=int32 */, 0.0123373f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2078 = qnn.quantize(meta[relay.Constant][284] /* ty=Tensor[(1024, 1024), float32] */, 0.00122152f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2079 = transpose(%2078, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2080 = reshape(%2077, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2081 = transpose(%2079, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2082 = qnn.dense(%2080, %2081, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0123373f /* ty=float32 */, 0.00122152f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2083 = reshape(%2082, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2084 = qnn.quantize(meta[relay.Constant][285] /* ty=Tensor[(1024), float32] */, 1.50702e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2085 = qnn.add(%2083, %2084, 1.50702e-05f /* ty=float32 */, 0 /* ty=int32 */, 1.50702e-05f /* ty=float32 */, 0 /* ty=int32 */, 1.50702e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2086 = qnn.requantize(%2085, 1.50702e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.00941476f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2087 = qnn.quantize(%2019, 0.084264f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2088 = qnn.dequantize(%2086, 0.00941476f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2089 = qnn.dequantize(%2087, 0.084264f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2090 = add(%2088, %2089) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2091 = mean(%2090, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2092 = subtract(%2090, %2091) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2093 = power(%2092, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2094 = mean(%2093, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2095 = add(%2094, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %2096 = sqrt(%2095) /* ty=Tensor[(1, 128, 1), float32] */;
  %2097 = divide(%2092, %2096) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2098 = multiply(%2097, meta[relay.Constant][286] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2099 = add(%2098, meta[relay.Constant][287] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2100 = qnn.quantize(%2099, 0.251456f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2101 = qnn.quantize(meta[relay.Constant][288] /* ty=Tensor[(4096, 1024), float32] */, 0.00447313f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %2102 = transpose(%2101, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %2103 = reshape(%2100, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2104 = transpose(%2102, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %2105 = qnn.dense(%2103, %2104, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.251456f /* ty=float32 */, 0.00447313f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %2106 = reshape(%2105, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %2107 = qnn.dequantize(%2106, 0.00112479f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2108 = add(%2107, meta[relay.Constant][289] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2109 = divide(%2108, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2110 = erf(%2109) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2111 = multiply(%2108, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2112 = add(%2110, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2113 = multiply(%2111, %2112) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2114 = qnn.quantize(%2113, 0.0367637f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %2115 = qnn.quantize(meta[relay.Constant][290] /* ty=Tensor[(1024, 4096), float32] */, 0.0351194f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %2116 = transpose(%2115, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %2117 = reshape(%2114, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %2118 = transpose(%2116, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %2119 = qnn.dense(%2117, %2118, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0367637f /* ty=float32 */, 0.0351194f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2120 = reshape(%2119, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2121 = qnn.quantize(meta[relay.Constant][291] /* ty=Tensor[(1024), float32] */, 0.00129112f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2122 = qnn.add(%2120, %2121, 0.00129112f /* ty=float32 */, 0 /* ty=int32 */, 0.00129112f /* ty=float32 */, 0 /* ty=int32 */, 0.00129112f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2123 = qnn.requantize(%2122, 0.00129112f /* ty=float32 */, 0 /* ty=int32 */, 0.0259907f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2124 = qnn.quantize(%2099, 0.251456f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2125 = qnn.dequantize(%2123, 0.0259907f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2126 = qnn.dequantize(%2124, 0.251456f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2127 = add(%2125, %2126) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2128 = mean(%2127, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2129 = subtract(%2127, %2128) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2130 = power(%2129, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2131 = mean(%2130, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2132 = add(%2131, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %2133 = sqrt(%2132) /* ty=Tensor[(1, 128, 1), float32] */;
  %2134 = divide(%2129, %2133) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2135 = multiply(%2134, meta[relay.Constant][292] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2136 = add(%2135, meta[relay.Constant][293] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2137 = qnn.quantize(%2136, 0.0714633f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2138 = qnn.quantize(meta[relay.Constant][294] /* ty=Tensor[(1024, 1024), float32] */, 0.00249385f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2139 = transpose(%2138, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2140 = reshape(%2137, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2141 = transpose(%2139, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2142 = qnn.dense(%2140, %2141, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0714633f /* ty=float32 */, 0.00249385f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2143 = reshape(%2142, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2144 = qnn.quantize(meta[relay.Constant][295] /* ty=Tensor[(1024), float32] */, 0.000178219f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2145 = qnn.add(%2143, %2144, 0.000178219f /* ty=float32 */, 0 /* ty=int32 */, 0.000178219f /* ty=float32 */, 0 /* ty=int32 */, 0.000178219f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2146 = reshape(%2145, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2147 = transpose(%2146, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2148 = qnn.requantize(%2147, 0.000178219f /* ty=float32 */, 0 /* ty=int32 */, 0.0521537f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2149 = broadcast_to(%2148, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2150 = qnn.quantize(%2136, 0.0714633f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2151 = qnn.quantize(meta[relay.Constant][296] /* ty=Tensor[(1024, 1024), float32] */, 0.00249385f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2152 = transpose(%2151, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2153 = reshape(%2150, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2154 = transpose(%2152, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2155 = qnn.dense(%2153, %2154, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0714633f /* ty=float32 */, 0.00249385f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2156 = reshape(%2155, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2157 = qnn.quantize(meta[relay.Constant][297] /* ty=Tensor[(1024), float32] */, 0.000178219f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2158 = qnn.add(%2156, %2157, 0.000178219f /* ty=float32 */, 0 /* ty=int32 */, 0.000178219f /* ty=float32 */, 0 /* ty=int32 */, 0.000178219f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2159 = reshape(%2158, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2160 = transpose(%2159, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %2161 = qnn.requantize(%2160, 0.000178219f /* ty=float32 */, 0 /* ty=int32 */, 0.0521537f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %2162 = broadcast_to(%2161, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %2163 = reshape(%2162, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %2164 = reshape(%2149, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2165 = transpose(%2163, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2166 = qnn.batch_matmul(%2164, %2165, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0521537f /* ty=float32 */, 0.0521537f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %2167 = reshape(%2166, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %2168 = qnn.dequantize(%2167, 0.00272001f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2169 = divide(%2168, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2170 = add(%2169, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2171 = nn.softmax(%2170, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2172 = qnn.quantize(%2171, 0.00637493f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %2173 = broadcast_to(%2172, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %2174 = qnn.quantize(%2136, 0.0714633f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2175 = qnn.quantize(meta[relay.Constant][298] /* ty=Tensor[(1024, 1024), float32] */, 0.00249385f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2176 = transpose(%2175, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2177 = reshape(%2174, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2178 = transpose(%2176, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2179 = qnn.dense(%2177, %2178, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0714633f /* ty=float32 */, 0.00249385f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2180 = reshape(%2179, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2181 = qnn.quantize(meta[relay.Constant][299] /* ty=Tensor[(1024), float32] */, 0.000178219f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2182 = qnn.add(%2180, %2181, 0.000178219f /* ty=float32 */, 0 /* ty=int32 */, 0.000178219f /* ty=float32 */, 0 /* ty=int32 */, 0.000178219f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2183 = reshape(%2182, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2184 = transpose(%2183, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2185 = qnn.requantize(%2184, 0.000178219f /* ty=float32 */, 0 /* ty=int32 */, 0.0521537f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2186 = broadcast_to(%2185, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2187 = reshape(%2186, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2188 = reshape(%2173, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %2189 = transpose(%2187, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %2190 = qnn.batch_matmul(%2188, %2189, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00637493f /* ty=float32 */, 0.0521537f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %2191 = reshape(%2190, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2192 = transpose(%2191, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2193 = reshape(%2192, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2194 = qnn.requantize(%2193, 0.000332476f /* ty=float32 */, 0 /* ty=int32 */, 0.0178857f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2195 = qnn.quantize(meta[relay.Constant][300] /* ty=Tensor[(1024, 1024), float32] */, 0.00116097f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2196 = transpose(%2195, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2197 = reshape(%2194, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2198 = transpose(%2196, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2199 = qnn.dense(%2197, %2198, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0178857f /* ty=float32 */, 0.00116097f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2200 = reshape(%2199, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2201 = qnn.quantize(meta[relay.Constant][301] /* ty=Tensor[(1024), float32] */, 2.07647e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2202 = qnn.add(%2200, %2201, 2.07647e-05f /* ty=float32 */, 0 /* ty=int32 */, 2.07647e-05f /* ty=float32 */, 0 /* ty=int32 */, 2.07647e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2203 = qnn.requantize(%2202, 2.07647e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0140143f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2204 = qnn.quantize(%2136, 0.0714633f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2205 = qnn.dequantize(%2203, 0.0140143f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2206 = qnn.dequantize(%2204, 0.0714633f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2207 = add(%2205, %2206) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2208 = mean(%2207, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2209 = subtract(%2207, %2208) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2210 = power(%2209, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2211 = mean(%2210, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2212 = add(%2211, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %2213 = sqrt(%2212) /* ty=Tensor[(1, 128, 1), float32] */;
  %2214 = divide(%2209, %2213) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2215 = multiply(%2214, meta[relay.Constant][302] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2216 = add(%2215, meta[relay.Constant][303] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2217 = qnn.quantize(%2216, 0.208032f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2218 = qnn.quantize(meta[relay.Constant][304] /* ty=Tensor[(4096, 1024), float32] */, 0.00907782f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %2219 = transpose(%2218, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %2220 = reshape(%2217, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2221 = transpose(%2219, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %2222 = qnn.dense(%2220, %2221, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.208032f /* ty=float32 */, 0.00907782f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %2223 = reshape(%2222, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %2224 = qnn.dequantize(%2223, 0.00188848f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2225 = add(%2224, meta[relay.Constant][305] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2226 = divide(%2225, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2227 = erf(%2226) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2228 = multiply(%2225, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2229 = add(%2227, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2230 = multiply(%2228, %2229) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2231 = qnn.quantize(%2230, 0.0263559f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %2232 = qnn.quantize(meta[relay.Constant][306] /* ty=Tensor[(1024, 4096), float32] */, 0.0428903f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %2233 = transpose(%2232, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %2234 = reshape(%2231, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %2235 = transpose(%2233, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %2236 = qnn.dense(%2234, %2235, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0263559f /* ty=float32 */, 0.0428903f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2237 = reshape(%2236, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2238 = qnn.quantize(meta[relay.Constant][307] /* ty=Tensor[(1024), float32] */, 0.00113041f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2239 = qnn.add(%2237, %2238, 0.00113041f /* ty=float32 */, 0 /* ty=int32 */, 0.00113041f /* ty=float32 */, 0 /* ty=int32 */, 0.00113041f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2240 = qnn.requantize(%2239, 0.00113041f /* ty=float32 */, 0 /* ty=int32 */, 0.0206429f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2241 = qnn.quantize(%2216, 0.208032f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2242 = qnn.dequantize(%2240, 0.0206429f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2243 = qnn.dequantize(%2241, 0.208032f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2244 = add(%2242, %2243) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2245 = mean(%2244, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2246 = subtract(%2244, %2245) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2247 = power(%2246, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2248 = mean(%2247, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2249 = add(%2248, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %2250 = sqrt(%2249) /* ty=Tensor[(1, 128, 1), float32] */;
  %2251 = divide(%2246, %2250) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2252 = multiply(%2251, meta[relay.Constant][308] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2253 = add(%2252, meta[relay.Constant][309] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2254 = qnn.quantize(%2253, 0.0559748f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2255 = qnn.quantize(meta[relay.Constant][310] /* ty=Tensor[(1024, 1024), float32] */, 0.00261538f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2256 = transpose(%2255, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2257 = reshape(%2254, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2258 = transpose(%2256, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2259 = qnn.dense(%2257, %2258, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0559748f /* ty=float32 */, 0.00261538f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2260 = reshape(%2259, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2261 = qnn.quantize(meta[relay.Constant][311] /* ty=Tensor[(1024), float32] */, 0.000146395f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2262 = qnn.add(%2260, %2261, 0.000146395f /* ty=float32 */, 0 /* ty=int32 */, 0.000146395f /* ty=float32 */, 0 /* ty=int32 */, 0.000146395f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2263 = reshape(%2262, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2264 = transpose(%2263, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2265 = qnn.requantize(%2264, 0.000146395f /* ty=float32 */, 0 /* ty=int32 */, 0.0585126f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2266 = broadcast_to(%2265, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2267 = qnn.quantize(%2253, 0.0559748f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2268 = qnn.quantize(meta[relay.Constant][312] /* ty=Tensor[(1024, 1024), float32] */, 0.00261538f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2269 = transpose(%2268, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2270 = reshape(%2267, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2271 = transpose(%2269, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2272 = qnn.dense(%2270, %2271, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0559748f /* ty=float32 */, 0.00261538f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2273 = reshape(%2272, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2274 = qnn.quantize(meta[relay.Constant][313] /* ty=Tensor[(1024), float32] */, 0.000146395f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2275 = qnn.add(%2273, %2274, 0.000146395f /* ty=float32 */, 0 /* ty=int32 */, 0.000146395f /* ty=float32 */, 0 /* ty=int32 */, 0.000146395f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2276 = reshape(%2275, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2277 = transpose(%2276, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %2278 = qnn.requantize(%2277, 0.000146395f /* ty=float32 */, 0 /* ty=int32 */, 0.0585126f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %2279 = broadcast_to(%2278, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %2280 = reshape(%2279, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %2281 = reshape(%2266, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2282 = transpose(%2280, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2283 = qnn.batch_matmul(%2281, %2282, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0585126f /* ty=float32 */, 0.0585126f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %2284 = reshape(%2283, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %2285 = qnn.dequantize(%2284, 0.00342373f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2286 = divide(%2285, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2287 = add(%2286, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2288 = nn.softmax(%2287, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2289 = qnn.quantize(%2288, 0.00859989f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %2290 = broadcast_to(%2289, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %2291 = qnn.quantize(%2253, 0.0559748f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2292 = qnn.quantize(meta[relay.Constant][314] /* ty=Tensor[(1024, 1024), float32] */, 0.00261538f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2293 = transpose(%2292, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2294 = reshape(%2291, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2295 = transpose(%2293, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2296 = qnn.dense(%2294, %2295, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0559748f /* ty=float32 */, 0.00261538f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2297 = reshape(%2296, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2298 = qnn.quantize(meta[relay.Constant][315] /* ty=Tensor[(1024), float32] */, 0.000146395f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2299 = qnn.add(%2297, %2298, 0.000146395f /* ty=float32 */, 0 /* ty=int32 */, 0.000146395f /* ty=float32 */, 0 /* ty=int32 */, 0.000146395f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2300 = reshape(%2299, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2301 = transpose(%2300, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2302 = qnn.requantize(%2301, 0.000146395f /* ty=float32 */, 0 /* ty=int32 */, 0.0585126f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2303 = broadcast_to(%2302, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2304 = reshape(%2303, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2305 = reshape(%2290, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %2306 = transpose(%2304, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %2307 = qnn.batch_matmul(%2305, %2306, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00859989f /* ty=float32 */, 0.0585126f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %2308 = reshape(%2307, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2309 = transpose(%2308, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2310 = reshape(%2309, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2311 = qnn.requantize(%2310, 0.000503202f /* ty=float32 */, 0 /* ty=int32 */, 0.0145719f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2312 = qnn.quantize(meta[relay.Constant][316] /* ty=Tensor[(1024, 1024), float32] */, 0.00137911f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2313 = transpose(%2312, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2314 = reshape(%2311, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2315 = transpose(%2313, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2316 = qnn.dense(%2314, %2315, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0145719f /* ty=float32 */, 0.00137911f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2317 = reshape(%2316, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2318 = qnn.quantize(meta[relay.Constant][317] /* ty=Tensor[(1024), float32] */, 2.00963e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2319 = qnn.add(%2317, %2318, 2.00963e-05f /* ty=float32 */, 0 /* ty=int32 */, 2.00963e-05f /* ty=float32 */, 0 /* ty=int32 */, 2.00963e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2320 = qnn.requantize(%2319, 2.00963e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.011562f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2321 = qnn.quantize(%2253, 0.0559748f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2322 = qnn.dequantize(%2320, 0.011562f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2323 = qnn.dequantize(%2321, 0.0559748f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2324 = add(%2322, %2323) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2325 = mean(%2324, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2326 = subtract(%2324, %2325) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2327 = power(%2326, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2328 = mean(%2327, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2329 = add(%2328, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %2330 = sqrt(%2329) /* ty=Tensor[(1, 128, 1), float32] */;
  %2331 = divide(%2326, %2330) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2332 = multiply(%2331, meta[relay.Constant][318] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2333 = add(%2332, meta[relay.Constant][319] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2334 = qnn.quantize(%2333, 0.124287f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2335 = qnn.quantize(meta[relay.Constant][320] /* ty=Tensor[(4096, 1024), float32] */, 0.00367934f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %2336 = transpose(%2335, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %2337 = reshape(%2334, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2338 = transpose(%2336, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %2339 = qnn.dense(%2337, %2338, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.124287f /* ty=float32 */, 0.00367934f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %2340 = reshape(%2339, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %2341 = qnn.dequantize(%2340, 0.000457293f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2342 = add(%2341, meta[relay.Constant][321] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2343 = divide(%2342, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2344 = erf(%2343) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2345 = multiply(%2342, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2346 = add(%2344, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2347 = multiply(%2345, %2346) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2348 = qnn.quantize(%2347, 0.018724f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %2349 = qnn.quantize(meta[relay.Constant][322] /* ty=Tensor[(1024, 4096), float32] */, 0.0422863f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %2350 = transpose(%2349, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %2351 = reshape(%2348, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %2352 = transpose(%2350, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %2353 = qnn.dense(%2351, %2352, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.018724f /* ty=float32 */, 0.0422863f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2354 = reshape(%2353, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2355 = qnn.quantize(meta[relay.Constant][323] /* ty=Tensor[(1024), float32] */, 0.000791767f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2356 = qnn.add(%2354, %2355, 0.000791767f /* ty=float32 */, 0 /* ty=int32 */, 0.000791767f /* ty=float32 */, 0 /* ty=int32 */, 0.000791767f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2357 = qnn.requantize(%2356, 0.000791767f /* ty=float32 */, 0 /* ty=int32 */, 0.0318989f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2358 = qnn.quantize(%2333, 0.124287f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2359 = qnn.dequantize(%2357, 0.0318989f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2360 = qnn.dequantize(%2358, 0.124287f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2361 = add(%2359, %2360) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2362 = mean(%2361, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2363 = subtract(%2361, %2362) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2364 = power(%2363, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2365 = mean(%2364, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2366 = add(%2365, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %2367 = sqrt(%2366) /* ty=Tensor[(1, 128, 1), float32] */;
  %2368 = divide(%2363, %2367) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2369 = multiply(%2368, meta[relay.Constant][324] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2370 = add(%2369, meta[relay.Constant][325] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2371 = qnn.quantize(%2370, 0.040475f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2372 = qnn.quantize(meta[relay.Constant][326] /* ty=Tensor[(1024, 1024), float32] */, 0.0034204f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2373 = transpose(%2372, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2374 = reshape(%2371, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2375 = transpose(%2373, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2376 = qnn.dense(%2374, %2375, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.040475f /* ty=float32 */, 0.0034204f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2377 = reshape(%2376, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2378 = qnn.quantize(meta[relay.Constant][327] /* ty=Tensor[(1024), float32] */, 0.000138441f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2379 = qnn.add(%2377, %2378, 0.000138441f /* ty=float32 */, 0 /* ty=int32 */, 0.000138441f /* ty=float32 */, 0 /* ty=int32 */, 0.000138441f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2380 = reshape(%2379, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2381 = transpose(%2380, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2382 = qnn.requantize(%2381, 0.000138441f /* ty=float32 */, 0 /* ty=int32 */, 0.0636902f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2383 = broadcast_to(%2382, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2384 = qnn.quantize(%2370, 0.040475f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2385 = qnn.quantize(meta[relay.Constant][328] /* ty=Tensor[(1024, 1024), float32] */, 0.0034204f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2386 = transpose(%2385, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2387 = reshape(%2384, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2388 = transpose(%2386, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2389 = qnn.dense(%2387, %2388, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.040475f /* ty=float32 */, 0.0034204f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2390 = reshape(%2389, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2391 = qnn.quantize(meta[relay.Constant][329] /* ty=Tensor[(1024), float32] */, 0.000138441f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2392 = qnn.add(%2390, %2391, 0.000138441f /* ty=float32 */, 0 /* ty=int32 */, 0.000138441f /* ty=float32 */, 0 /* ty=int32 */, 0.000138441f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2393 = reshape(%2392, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2394 = transpose(%2393, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %2395 = qnn.requantize(%2394, 0.000138441f /* ty=float32 */, 0 /* ty=int32 */, 0.0636902f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %2396 = broadcast_to(%2395, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %2397 = reshape(%2396, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %2398 = reshape(%2383, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2399 = transpose(%2397, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2400 = qnn.batch_matmul(%2398, %2399, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0636902f /* ty=float32 */, 0.0636902f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %2401 = reshape(%2400, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %2402 = qnn.dequantize(%2401, 0.00405644f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2403 = divide(%2402, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2404 = add(%2403, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2405 = nn.softmax(%2404, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2406 = qnn.quantize(%2405, 0.00874455f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %2407 = broadcast_to(%2406, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %2408 = qnn.quantize(%2370, 0.040475f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2409 = qnn.quantize(meta[relay.Constant][330] /* ty=Tensor[(1024, 1024), float32] */, 0.0034204f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2410 = transpose(%2409, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2411 = reshape(%2408, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2412 = transpose(%2410, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2413 = qnn.dense(%2411, %2412, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.040475f /* ty=float32 */, 0.0034204f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2414 = reshape(%2413, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2415 = qnn.quantize(meta[relay.Constant][331] /* ty=Tensor[(1024), float32] */, 0.000138441f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2416 = qnn.add(%2414, %2415, 0.000138441f /* ty=float32 */, 0 /* ty=int32 */, 0.000138441f /* ty=float32 */, 0 /* ty=int32 */, 0.000138441f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2417 = reshape(%2416, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2418 = transpose(%2417, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2419 = qnn.requantize(%2418, 0.000138441f /* ty=float32 */, 0 /* ty=int32 */, 0.0636902f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2420 = broadcast_to(%2419, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2421 = reshape(%2420, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2422 = reshape(%2407, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %2423 = transpose(%2421, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %2424 = qnn.batch_matmul(%2422, %2423, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00874455f /* ty=float32 */, 0.0636902f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %2425 = reshape(%2424, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2426 = transpose(%2425, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2427 = reshape(%2426, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2428 = qnn.requantize(%2427, 0.000556942f /* ty=float32 */, 0 /* ty=int32 */, 0.017819f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2429 = qnn.quantize(meta[relay.Constant][332] /* ty=Tensor[(1024, 1024), float32] */, 0.0017345f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2430 = transpose(%2429, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2431 = reshape(%2428, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2432 = transpose(%2430, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2433 = qnn.dense(%2431, %2432, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.017819f /* ty=float32 */, 0.0017345f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2434 = reshape(%2433, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2435 = qnn.quantize(meta[relay.Constant][333] /* ty=Tensor[(1024), float32] */, 3.09069e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2436 = qnn.add(%2434, %2435, 3.09069e-05f /* ty=float32 */, 0 /* ty=int32 */, 3.09069e-05f /* ty=float32 */, 0 /* ty=int32 */, 3.09069e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2437 = qnn.requantize(%2436, 3.09069e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0108029f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2438 = qnn.quantize(%2370, 0.040475f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2439 = qnn.dequantize(%2437, 0.0108029f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2440 = qnn.dequantize(%2438, 0.040475f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2441 = add(%2439, %2440) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2442 = mean(%2441, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2443 = subtract(%2441, %2442) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2444 = power(%2443, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2445 = mean(%2444, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2446 = add(%2445, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %2447 = sqrt(%2446) /* ty=Tensor[(1, 128, 1), float32] */;
  %2448 = divide(%2443, %2447) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2449 = multiply(%2448, meta[relay.Constant][334] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2450 = add(%2449, meta[relay.Constant][335] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2451 = qnn.quantize(%2450, 0.0905224f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2452 = qnn.quantize(meta[relay.Constant][336] /* ty=Tensor[(4096, 1024), float32] */, 0.00375284f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %2453 = transpose(%2452, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %2454 = reshape(%2451, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2455 = transpose(%2453, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %2456 = qnn.dense(%2454, %2455, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0905224f /* ty=float32 */, 0.00375284f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %2457 = reshape(%2456, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %2458 = qnn.dequantize(%2457, 0.000339716f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2459 = add(%2458, meta[relay.Constant][337] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2460 = divide(%2459, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2461 = erf(%2460) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2462 = multiply(%2459, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2463 = add(%2461, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2464 = multiply(%2462, %2463) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2465 = qnn.quantize(%2464, 0.0247041f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %2466 = qnn.quantize(meta[relay.Constant][338] /* ty=Tensor[(1024, 4096), float32] */, 0.0394685f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %2467 = transpose(%2466, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %2468 = reshape(%2465, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %2469 = transpose(%2467, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %2470 = qnn.dense(%2468, %2469, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0247041f /* ty=float32 */, 0.0394685f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2471 = reshape(%2470, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2472 = qnn.quantize(meta[relay.Constant][339] /* ty=Tensor[(1024), float32] */, 0.000975035f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2473 = qnn.add(%2471, %2472, 0.000975035f /* ty=float32 */, 0 /* ty=int32 */, 0.000975035f /* ty=float32 */, 0 /* ty=int32 */, 0.000975035f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2474 = qnn.requantize(%2473, 0.000975035f /* ty=float32 */, 0 /* ty=int32 */, 0.0631223f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2475 = qnn.quantize(%2450, 0.0905224f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2476 = qnn.dequantize(%2474, 0.0631223f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2477 = qnn.dequantize(%2475, 0.0905224f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2478 = add(%2476, %2477) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2479 = mean(%2478, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2480 = subtract(%2478, %2479) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2481 = power(%2480, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2482 = mean(%2481, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2483 = add(%2482, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %2484 = sqrt(%2483) /* ty=Tensor[(1, 128, 1), float32] */;
  %2485 = divide(%2480, %2484) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2486 = multiply(%2485, meta[relay.Constant][340] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2487 = add(%2486, meta[relay.Constant][341] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2488 = qnn.quantize(%2487, 0.0516203f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2489 = qnn.quantize(meta[relay.Constant][342] /* ty=Tensor[(1024, 1024), float32] */, 0.00261954f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2490 = transpose(%2489, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2491 = reshape(%2488, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2492 = transpose(%2490, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2493 = qnn.dense(%2491, %2492, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0516203f /* ty=float32 */, 0.00261954f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2494 = reshape(%2493, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2495 = qnn.quantize(meta[relay.Constant][343] /* ty=Tensor[(1024), float32] */, 0.000135221f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2496 = qnn.add(%2494, %2495, 0.000135221f /* ty=float32 */, 0 /* ty=int32 */, 0.000135221f /* ty=float32 */, 0 /* ty=int32 */, 0.000135221f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2497 = reshape(%2496, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2498 = transpose(%2497, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2499 = qnn.requantize(%2498, 0.000135221f /* ty=float32 */, 0 /* ty=int32 */, 0.0840862f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2500 = broadcast_to(%2499, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2501 = qnn.quantize(%2487, 0.0516203f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2502 = qnn.quantize(meta[relay.Constant][344] /* ty=Tensor[(1024, 1024), float32] */, 0.00261954f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2503 = transpose(%2502, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2504 = reshape(%2501, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2505 = transpose(%2503, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2506 = qnn.dense(%2504, %2505, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0516203f /* ty=float32 */, 0.00261954f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2507 = reshape(%2506, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2508 = qnn.quantize(meta[relay.Constant][345] /* ty=Tensor[(1024), float32] */, 0.000135221f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2509 = qnn.add(%2507, %2508, 0.000135221f /* ty=float32 */, 0 /* ty=int32 */, 0.000135221f /* ty=float32 */, 0 /* ty=int32 */, 0.000135221f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2510 = reshape(%2509, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2511 = transpose(%2510, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %2512 = qnn.requantize(%2511, 0.000135221f /* ty=float32 */, 0 /* ty=int32 */, 0.0840862f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %2513 = broadcast_to(%2512, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %2514 = reshape(%2513, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %2515 = reshape(%2500, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2516 = transpose(%2514, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2517 = qnn.batch_matmul(%2515, %2516, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0840862f /* ty=float32 */, 0.0840862f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %2518 = reshape(%2517, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %2519 = qnn.dequantize(%2518, 0.00707049f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2520 = divide(%2519, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2521 = add(%2520, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2522 = nn.softmax(%2521, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2523 = qnn.quantize(%2522, 0.00874463f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %2524 = broadcast_to(%2523, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %2525 = qnn.quantize(%2487, 0.0516203f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2526 = qnn.quantize(meta[relay.Constant][346] /* ty=Tensor[(1024, 1024), float32] */, 0.00261954f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2527 = transpose(%2526, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2528 = reshape(%2525, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2529 = transpose(%2527, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2530 = qnn.dense(%2528, %2529, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0516203f /* ty=float32 */, 0.00261954f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2531 = reshape(%2530, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2532 = qnn.quantize(meta[relay.Constant][347] /* ty=Tensor[(1024), float32] */, 0.000135221f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2533 = qnn.add(%2531, %2532, 0.000135221f /* ty=float32 */, 0 /* ty=int32 */, 0.000135221f /* ty=float32 */, 0 /* ty=int32 */, 0.000135221f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2534 = reshape(%2533, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2535 = transpose(%2534, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2536 = qnn.requantize(%2535, 0.000135221f /* ty=float32 */, 0 /* ty=int32 */, 0.0840862f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2537 = broadcast_to(%2536, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2538 = reshape(%2537, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2539 = reshape(%2524, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %2540 = transpose(%2538, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %2541 = qnn.batch_matmul(%2539, %2540, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00874463f /* ty=float32 */, 0.0840862f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %2542 = reshape(%2541, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2543 = transpose(%2542, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2544 = reshape(%2543, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2545 = qnn.requantize(%2544, 0.000735303f /* ty=float32 */, 0 /* ty=int32 */, 0.0235953f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2546 = qnn.quantize(meta[relay.Constant][348] /* ty=Tensor[(1024, 1024), float32] */, 0.00154782f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2547 = transpose(%2546, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2548 = reshape(%2545, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2549 = transpose(%2547, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2550 = qnn.dense(%2548, %2549, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0235953f /* ty=float32 */, 0.00154782f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2551 = reshape(%2550, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2552 = qnn.quantize(meta[relay.Constant][349] /* ty=Tensor[(1024), float32] */, 3.65214e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2553 = qnn.add(%2551, %2552, 3.65214e-05f /* ty=float32 */, 0 /* ty=int32 */, 3.65214e-05f /* ty=float32 */, 0 /* ty=int32 */, 3.65214e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2554 = qnn.requantize(%2553, 3.65214e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0149513f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2555 = qnn.quantize(%2487, 0.0516203f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2556 = qnn.dequantize(%2554, 0.0149513f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2557 = qnn.dequantize(%2555, 0.0516203f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2558 = add(%2556, %2557) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2559 = mean(%2558, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2560 = subtract(%2558, %2559) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2561 = power(%2560, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2562 = mean(%2561, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2563 = add(%2562, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %2564 = sqrt(%2563) /* ty=Tensor[(1, 128, 1), float32] */;
  %2565 = divide(%2560, %2564) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2566 = multiply(%2565, meta[relay.Constant][350] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2567 = add(%2566, meta[relay.Constant][351] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2568 = qnn.quantize(%2567, 0.10457f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2569 = qnn.quantize(meta[relay.Constant][352] /* ty=Tensor[(4096, 1024), float32] */, 0.0110471f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %2570 = transpose(%2569, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %2571 = reshape(%2568, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2572 = transpose(%2570, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %2573 = qnn.dense(%2571, %2572, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.10457f /* ty=float32 */, 0.0110471f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %2574 = reshape(%2573, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %2575 = qnn.dequantize(%2574, 0.00115519f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2576 = add(%2575, meta[relay.Constant][353] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2577 = divide(%2576, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2578 = erf(%2577) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2579 = multiply(%2576, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2580 = add(%2578, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2581 = multiply(%2579, %2580) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2582 = qnn.quantize(%2581, 0.0259176f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %2583 = qnn.quantize(meta[relay.Constant][354] /* ty=Tensor[(1024, 4096), float32] */, 0.0447508f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %2584 = transpose(%2583, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %2585 = reshape(%2582, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %2586 = transpose(%2584, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %2587 = qnn.dense(%2585, %2586, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0259176f /* ty=float32 */, 0.0447508f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2588 = reshape(%2587, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2589 = qnn.quantize(meta[relay.Constant][355] /* ty=Tensor[(1024), float32] */, 0.00115983f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2590 = qnn.add(%2588, %2589, 0.00115983f /* ty=float32 */, 0 /* ty=int32 */, 0.00115983f /* ty=float32 */, 0 /* ty=int32 */, 0.00115983f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2591 = qnn.requantize(%2590, 0.00115983f /* ty=float32 */, 0 /* ty=int32 */, 0.125519f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2592 = qnn.quantize(%2567, 0.10457f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2593 = qnn.dequantize(%2591, 0.125519f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2594 = qnn.dequantize(%2592, 0.10457f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2595 = add(%2593, %2594) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2596 = mean(%2595, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2597 = subtract(%2595, %2596) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2598 = power(%2597, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2599 = mean(%2598, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2600 = add(%2599, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %2601 = sqrt(%2600) /* ty=Tensor[(1, 128, 1), float32] */;
  %2602 = divide(%2597, %2601) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2603 = multiply(%2602, meta[relay.Constant][356] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2604 = add(%2603, meta[relay.Constant][357] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2605 = qnn.quantize(%2604, 0.0497798f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2606 = qnn.quantize(meta[relay.Constant][358] /* ty=Tensor[(1024, 1024), float32] */, 0.00293422f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2607 = transpose(%2606, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2608 = reshape(%2605, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2609 = transpose(%2607, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2610 = qnn.dense(%2608, %2609, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0497798f /* ty=float32 */, 0.00293422f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2611 = reshape(%2610, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2612 = qnn.quantize(meta[relay.Constant][359] /* ty=Tensor[(1024), float32] */, 0.000146065f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2613 = qnn.add(%2611, %2612, 0.000146065f /* ty=float32 */, 0 /* ty=int32 */, 0.000146065f /* ty=float32 */, 0 /* ty=int32 */, 0.000146065f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2614 = reshape(%2613, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2615 = transpose(%2614, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2616 = qnn.requantize(%2615, 0.000146065f /* ty=float32 */, 0 /* ty=int32 */, 0.0825784f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2617 = broadcast_to(%2616, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2618 = qnn.quantize(%2604, 0.0497798f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2619 = qnn.quantize(meta[relay.Constant][360] /* ty=Tensor[(1024, 1024), float32] */, 0.00293422f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2620 = transpose(%2619, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2621 = reshape(%2618, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2622 = transpose(%2620, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2623 = qnn.dense(%2621, %2622, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0497798f /* ty=float32 */, 0.00293422f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2624 = reshape(%2623, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2625 = qnn.quantize(meta[relay.Constant][361] /* ty=Tensor[(1024), float32] */, 0.000146065f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2626 = qnn.add(%2624, %2625, 0.000146065f /* ty=float32 */, 0 /* ty=int32 */, 0.000146065f /* ty=float32 */, 0 /* ty=int32 */, 0.000146065f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2627 = reshape(%2626, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2628 = transpose(%2627, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %2629 = qnn.requantize(%2628, 0.000146065f /* ty=float32 */, 0 /* ty=int32 */, 0.0825784f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %2630 = broadcast_to(%2629, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %2631 = reshape(%2630, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %2632 = reshape(%2617, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2633 = transpose(%2631, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2634 = qnn.batch_matmul(%2632, %2633, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0825784f /* ty=float32 */, 0.0825784f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %2635 = reshape(%2634, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %2636 = qnn.dequantize(%2635, 0.00681919f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2637 = divide(%2636, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2638 = add(%2637, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2639 = nn.softmax(%2638, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2640 = qnn.quantize(%2639, 0.00874463f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %2641 = broadcast_to(%2640, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %2642 = qnn.quantize(%2604, 0.0497798f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2643 = qnn.quantize(meta[relay.Constant][362] /* ty=Tensor[(1024, 1024), float32] */, 0.00293422f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2644 = transpose(%2643, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2645 = reshape(%2642, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2646 = transpose(%2644, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2647 = qnn.dense(%2645, %2646, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0497798f /* ty=float32 */, 0.00293422f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2648 = reshape(%2647, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2649 = qnn.quantize(meta[relay.Constant][363] /* ty=Tensor[(1024), float32] */, 0.000146065f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2650 = qnn.add(%2648, %2649, 0.000146065f /* ty=float32 */, 0 /* ty=int32 */, 0.000146065f /* ty=float32 */, 0 /* ty=int32 */, 0.000146065f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2651 = reshape(%2650, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2652 = transpose(%2651, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2653 = qnn.requantize(%2652, 0.000146065f /* ty=float32 */, 0 /* ty=int32 */, 0.0825784f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2654 = broadcast_to(%2653, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2655 = reshape(%2654, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2656 = reshape(%2641, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %2657 = transpose(%2655, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %2658 = qnn.batch_matmul(%2656, %2657, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00874463f /* ty=float32 */, 0.0825784f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %2659 = reshape(%2658, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2660 = transpose(%2659, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2661 = reshape(%2660, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2662 = qnn.requantize(%2661, 0.000722118f /* ty=float32 */, 0 /* ty=int32 */, 0.0139549f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2663 = qnn.quantize(meta[relay.Constant][364] /* ty=Tensor[(1024, 1024), float32] */, 0.00202837f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2664 = transpose(%2663, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2665 = reshape(%2662, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2666 = transpose(%2664, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2667 = qnn.dense(%2665, %2666, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0139549f /* ty=float32 */, 0.00202837f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2668 = reshape(%2667, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2669 = qnn.quantize(meta[relay.Constant][365] /* ty=Tensor[(1024), float32] */, 2.83058e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2670 = qnn.add(%2668, %2669, 2.83058e-05f /* ty=float32 */, 0 /* ty=int32 */, 2.83058e-05f /* ty=float32 */, 0 /* ty=int32 */, 2.83058e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2671 = qnn.requantize(%2670, 2.83058e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.00948529f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2672 = qnn.quantize(%2604, 0.0497798f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2673 = qnn.dequantize(%2671, 0.00948529f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2674 = qnn.dequantize(%2672, 0.0497798f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2675 = add(%2673, %2674) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2676 = mean(%2675, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2677 = subtract(%2675, %2676) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2678 = power(%2677, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2679 = mean(%2678, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2680 = add(%2679, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %2681 = sqrt(%2680) /* ty=Tensor[(1, 128, 1), float32] */;
  %2682 = divide(%2677, %2681) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2683 = multiply(%2682, meta[relay.Constant][366] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2684 = add(%2683, meta[relay.Constant][367] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2685 = qnn.quantize(%2684, 0.0983768f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2686 = qnn.quantize(meta[relay.Constant][368] /* ty=Tensor[(4096, 1024), float32] */, 0.00732619f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %2687 = transpose(%2686, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %2688 = reshape(%2685, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2689 = transpose(%2687, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %2690 = qnn.dense(%2688, %2689, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0983768f /* ty=float32 */, 0.00732619f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %2691 = reshape(%2690, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %2692 = qnn.dequantize(%2691, 0.000720727f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2693 = add(%2692, meta[relay.Constant][369] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2694 = divide(%2693, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2695 = erf(%2694) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2696 = multiply(%2693, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2697 = add(%2695, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2698 = multiply(%2696, %2697) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2699 = qnn.quantize(%2698, 0.0244911f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %2700 = qnn.quantize(meta[relay.Constant][370] /* ty=Tensor[(1024, 4096), float32] */, 0.0546921f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %2701 = transpose(%2700, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %2702 = reshape(%2699, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %2703 = transpose(%2701, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %2704 = qnn.dense(%2702, %2703, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0244911f /* ty=float32 */, 0.0546921f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2705 = reshape(%2704, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2706 = qnn.quantize(meta[relay.Constant][371] /* ty=Tensor[(1024), float32] */, 0.00133947f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2707 = qnn.add(%2705, %2706, 0.00133947f /* ty=float32 */, 0 /* ty=int32 */, 0.00133947f /* ty=float32 */, 0 /* ty=int32 */, 0.00133947f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2708 = qnn.requantize(%2707, 0.00133947f /* ty=float32 */, 0 /* ty=int32 */, 0.190011f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2709 = qnn.quantize(%2684, 0.0983768f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2710 = qnn.dequantize(%2708, 0.190011f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2711 = qnn.dequantize(%2709, 0.0983768f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2712 = add(%2710, %2711) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2713 = mean(%2712, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2714 = subtract(%2712, %2713) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2715 = power(%2714, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2716 = mean(%2715, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2717 = add(%2716, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %2718 = sqrt(%2717) /* ty=Tensor[(1, 128, 1), float32] */;
  %2719 = divide(%2714, %2718) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2720 = multiply(%2719, meta[relay.Constant][372] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2721 = add(%2720, meta[relay.Constant][373] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2722 = qnn.quantize(%2721, 0.0625878f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2723 = qnn.quantize(meta[relay.Constant][374] /* ty=Tensor[(1024, 1024), float32] */, 0.00247782f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2724 = transpose(%2723, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2725 = reshape(%2722, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2726 = transpose(%2724, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2727 = qnn.dense(%2725, %2726, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0625878f /* ty=float32 */, 0.00247782f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2728 = reshape(%2727, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2729 = qnn.quantize(meta[relay.Constant][375] /* ty=Tensor[(1024), float32] */, 0.000155082f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2730 = qnn.add(%2728, %2729, 0.000155082f /* ty=float32 */, 0 /* ty=int32 */, 0.000155082f /* ty=float32 */, 0 /* ty=int32 */, 0.000155082f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2731 = reshape(%2730, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2732 = transpose(%2731, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2733 = qnn.requantize(%2732, 0.000155082f /* ty=float32 */, 0 /* ty=int32 */, 0.0953609f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2734 = broadcast_to(%2733, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2735 = qnn.quantize(%2721, 0.0625878f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2736 = qnn.quantize(meta[relay.Constant][376] /* ty=Tensor[(1024, 1024), float32] */, 0.00247782f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2737 = transpose(%2736, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2738 = reshape(%2735, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2739 = transpose(%2737, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2740 = qnn.dense(%2738, %2739, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0625878f /* ty=float32 */, 0.00247782f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2741 = reshape(%2740, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2742 = qnn.quantize(meta[relay.Constant][377] /* ty=Tensor[(1024), float32] */, 0.000155082f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2743 = qnn.add(%2741, %2742, 0.000155082f /* ty=float32 */, 0 /* ty=int32 */, 0.000155082f /* ty=float32 */, 0 /* ty=int32 */, 0.000155082f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2744 = reshape(%2743, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2745 = transpose(%2744, axes=[0, 2, 3, 1]) /* ty=Tensor[(1, 16, 64, 128), int32] */;
  %2746 = qnn.requantize(%2745, 0.000155082f /* ty=float32 */, 0 /* ty=int32 */, 0.0953609f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %2747 = broadcast_to(%2746, shape=[1, 16, 64, 128], dtype="") /* ty=Tensor[(1, 16, 64, 128), int8] */;
  %2748 = reshape(%2747, newshape=[-1, 64, 128]) /* ty=Tensor[(16, 64, 128), int8] */;
  %2749 = reshape(%2734, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2750 = transpose(%2748, axes=[0, 2, 1]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2751 = qnn.batch_matmul(%2749, %2750, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0953609f /* ty=float32 */, 0.0953609f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 128), int32] */;
  %2752 = reshape(%2751, newshape=[1, 16, 128, 128]) /* ty=Tensor[(1, 16, 128, 128), int32] */;
  %2753 = qnn.dequantize(%2752, 0.00909371f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2754 = divide(%2753, 8f /* ty=float32 */) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2755 = add(%2754, %63) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2756 = nn.softmax(%2755, axis=3) /* ty=Tensor[(1, 16, 128, 128), float32] */;
  %2757 = qnn.quantize(%2756, 0.00874463f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %2758 = broadcast_to(%2757, shape=[1, 16, 128, 128], dtype="") /* ty=Tensor[(1, 16, 128, 128), int8] */;
  %2759 = qnn.quantize(%2721, 0.0625878f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2760 = qnn.quantize(meta[relay.Constant][378] /* ty=Tensor[(1024, 1024), float32] */, 0.00247782f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2761 = transpose(%2760, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2762 = reshape(%2759, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2763 = transpose(%2761, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2764 = qnn.dense(%2762, %2763, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0625878f /* ty=float32 */, 0.00247782f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2765 = reshape(%2764, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2766 = qnn.quantize(meta[relay.Constant][379] /* ty=Tensor[(1024), float32] */, 0.000155082f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2767 = qnn.add(%2765, %2766, 0.000155082f /* ty=float32 */, 0 /* ty=int32 */, 0.000155082f /* ty=float32 */, 0 /* ty=int32 */, 0.000155082f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2768 = reshape(%2767, newshape=[1, 128, 16, 64]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2769 = transpose(%2768, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2770 = qnn.requantize(%2769, 0.000155082f /* ty=float32 */, 0 /* ty=int32 */, 0.0953609f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2771 = broadcast_to(%2770, shape=[1, 16, 128, 64], dtype="") /* ty=Tensor[(1, 16, 128, 64), int8] */;
  %2772 = reshape(%2771, newshape=[-1, 128, 64]) /* ty=Tensor[(16, 128, 64), int8] */;
  %2773 = reshape(%2758, newshape=[-1, 128, 128]) /* ty=Tensor[(16, 128, 128), int8] */;
  %2774 = transpose(%2772, axes=[0, 2, 1]) /* ty=Tensor[(16, 64, 128), int8] */;
  %2775 = qnn.batch_matmul(%2773, %2774, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.00874463f /* ty=float32 */, 0.0953609f /* ty=float32 */, out_dtype="int32", transpose_b=True) /* ty=Tensor[(16, 128, 64), int32] */;
  %2776 = reshape(%2775, newshape=[1, 16, 128, 64]) /* ty=Tensor[(1, 16, 128, 64), int32] */;
  %2777 = transpose(%2776, axes=[0, 2, 1, 3]) /* ty=Tensor[(1, 128, 16, 64), int32] */;
  %2778 = reshape(%2777, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2779 = qnn.requantize(%2778, 0.000833897f /* ty=float32 */, 0 /* ty=int32 */, 0.0161174f /* ty=float32 */, 0 /* ty=int32 */, axis=0, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2780 = qnn.quantize(meta[relay.Constant][380] /* ty=Tensor[(1024, 1024), float32] */, 0.00254287f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 1024), int8] */;
  %2781 = transpose(%2780, axes=[1, 0]) /* ty=Tensor[(1024, 1024), int8] */;
  %2782 = reshape(%2779, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2783 = transpose(%2781, axes=None) /* ty=Tensor[(1024, 1024), int8] */;
  %2784 = qnn.dense(%2782, %2783, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0161174f /* ty=float32 */, 0.00254287f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2785 = reshape(%2784, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2786 = qnn.quantize(meta[relay.Constant][381] /* ty=Tensor[(1024), float32] */, 4.09844e-05f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2787 = qnn.add(%2785, %2786, 4.09844e-05f /* ty=float32 */, 0 /* ty=int32 */, 4.09844e-05f /* ty=float32 */, 0 /* ty=int32 */, 4.09844e-05f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2788 = qnn.requantize(%2787, 4.09844e-05f /* ty=float32 */, 0 /* ty=int32 */, 0.0124789f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2789 = qnn.quantize(%2721, 0.0625878f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2790 = qnn.dequantize(%2788, 0.0124789f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2791 = qnn.dequantize(%2789, 0.0625878f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2792 = add(%2790, %2791) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2793 = mean(%2792, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2794 = subtract(%2792, %2793) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2795 = power(%2794, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2796 = mean(%2795, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2797 = add(%2796, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %2798 = sqrt(%2797) /* ty=Tensor[(1, 128, 1), float32] */;
  %2799 = divide(%2794, %2798) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2800 = multiply(%2799, meta[relay.Constant][382] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2801 = add(%2800, meta[relay.Constant][383] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2802 = qnn.quantize(%2801, 0.115698f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2803 = qnn.quantize(meta[relay.Constant][384] /* ty=Tensor[(4096, 1024), float32] */, 0.00270554f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(4096, 1024), int8] */;
  %2804 = transpose(%2803, axes=[1, 0]) /* ty=Tensor[(1024, 4096), int8] */;
  %2805 = reshape(%2802, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2806 = transpose(%2804, axes=None) /* ty=Tensor[(4096, 1024), int8] */;
  %2807 = qnn.dense(%2805, %2806, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.115698f /* ty=float32 */, 0.00270554f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 4096), int32] */;
  %2808 = reshape(%2807, newshape=[1, 128, 4096]) /* ty=Tensor[(1, 128, 4096), int32] */;
  %2809 = qnn.dequantize(%2808, 0.000313025f /* ty=float32 */, 0 /* ty=int32 */, axis=1) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2810 = add(%2809, meta[relay.Constant][385] /* ty=Tensor[(4096), float32] */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2811 = divide(%2810, 1.41421f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2812 = erf(%2811) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2813 = multiply(%2810, 0.5f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2814 = add(%2812, 1f /* ty=float32 */) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2815 = multiply(%2813, %2814) /* ty=Tensor[(1, 128, 4096), float32] */;
  %2816 = qnn.quantize(%2815, 0.0262631f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 4096), int8] */;
  %2817 = qnn.quantize(meta[relay.Constant][386] /* ty=Tensor[(1024, 4096), float32] */, 0.0102002f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1024, 4096), int8] */;
  %2818 = transpose(%2817, axes=[1, 0]) /* ty=Tensor[(4096, 1024), int8] */;
  %2819 = reshape(%2816, newshape=[-1, 4096]) /* ty=Tensor[(128, 4096), int8] */;
  %2820 = transpose(%2818, axes=None) /* ty=Tensor[(1024, 4096), int8] */;
  %2821 = qnn.dense(%2819, %2820, 0 /* ty=int32 */, 0 /* ty=int32 */, 0.0262631f /* ty=float32 */, 0.0102002f /* ty=float32 */, units=None, out_dtype="int32") /* ty=Tensor[(128, 1024), int32] */;
  %2822 = reshape(%2821, newshape=[1, 128, 1024]) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2823 = qnn.quantize(meta[relay.Constant][387] /* ty=Tensor[(1024), float32] */, 0.000267889f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int32") /* ty=Tensor[(1024), int32] */;
  %2824 = qnn.add(%2822, %2823, 0.000267889f /* ty=float32 */, 0 /* ty=int32 */, 0.000267889f /* ty=float32 */, 0 /* ty=int32 */, 0.000267889f /* ty=float32 */, 0 /* ty=int32 */) /* ty=Tensor[(1, 128, 1024), int32] */;
  %2825 = qnn.requantize(%2824, 0.000267889f /* ty=float32 */, 0 /* ty=int32 */, 0.0224242f /* ty=float32 */, 0 /* ty=int32 */, axis=1, out_dtype="int8") /* ty=Tensor[(1, 128, 1024), int8] */;
  %2826 = qnn.quantize(%2801, 0.115698f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2827 = qnn.dequantize(%2825, 0.0224242f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2828 = qnn.dequantize(%2826, 0.115698f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2829 = add(%2827, %2828) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2830 = mean(%2829, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2831 = subtract(%2829, %2830) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2832 = power(%2831, 2f /* ty=float32 */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2833 = mean(%2832, axis=[-1], keepdims=True) /* ty=Tensor[(1, 128, 1), float32] */;
  %2834 = add(%2833, 1e-12f /* ty=float32 */) /* ty=Tensor[(1, 128, 1), float32] */;
  %2835 = sqrt(%2834) /* ty=Tensor[(1, 128, 1), float32] */;
  %2836 = divide(%2831, %2835) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2837 = multiply(%2836, meta[relay.Constant][388] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2838 = add(%2837, meta[relay.Constant][389] /* ty=Tensor[(1024), float32] */) /* ty=Tensor[(1, 128, 1024), float32] */;
  %2839 = qnn.quantize(%2838, 0.0240934f /* ty=float32 */, 0 /* ty=int32 */, out_dtype="int8", axis=0) /* ty=Tensor[(1, 128, 1024), int8] */;
  %2840 = reshape(%2839, newshape=[-1, 1024]) /* ty=Tensor[(128, 1024), int8] */;
  %2841 = qnn.dequantize(%2840, 0.0240934f /* ty=float32 */, 0 /* ty=int32 */, axis=0) /* ty=Tensor[(128, 1024), float32] */;
  %2842 = nn.dense(%2841, meta[relay.Constant][390] /* ty=Tensor[(2, 1024), float32] */, units=None, out_dtype="float32") /* ty=Tensor[(128, 2), float32] */;
  %2843 = reshape(%2842, newshape=[1, 128, 2]) /* ty=Tensor[(1, 128, 2), float32] */;
  %2844 = add(%2843, meta[relay.Constant][391] /* ty=Tensor[(2), float32] */) /* ty=Tensor[(1, 128, 2), float32] */;
  %2845 = split(%2844, indices_or_sections=[1], axis=-1) /* ty=(Tensor[(1, 128, 1), float32], Tensor[(1, 128, 1), float32]) */;
  %2846 = %2845.0;
  %2847 = %2845.1;
  %2848 = squeeze(%2846, axis=[2]) /* ty=Tensor[(1, 128), float32] */;
  %2849 = squeeze(%2847, axis=[2]) /* ty=Tensor[(1, 128), float32] */;
  (%2848, %2849)
}


